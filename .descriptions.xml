<inspections profile="Project Default"><group name="Docker-compose" path=""><inspection shortName="ComposeUnquotedPorts" defaultSeverity="WEAK WARNING" displayName="Unquoted port mappings" enabled="true" language="yaml" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unquoted port mappings in Docker Compose files.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#short-syntax-1"&gt;Compose file specification&lt;/a&gt;,
  mapping ports in the &lt;code&gt;HOST:CONTAINER&lt;/code&gt; format may lead to erroneous results when using a container port lower than 60,
  because YAML parses numbers in the format &lt;code&gt;xx:yy&lt;/code&gt; as a base-60 value.
  For this reason, we recommend always explicitly specifying the port mappings as strings.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - 3000
    - 3000-3005
    - 22:22
    - 8080:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - "3000"
    - "3000-3005"
    - "22:22"
    - "8080:8080"
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnknownValues" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML values" enabled="true" language="yaml" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized values in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnknownKeys" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized keys in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeMissingKeys" defaultSeverity="ERROR" displayName="Missing docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing required keys in Docker Compose files.
&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Async code and promises" path="JavaScript and TypeScript"><inspection shortName="ES6PossiblyAsyncFunction" defaultSeverity="WEAK WARNING" displayName="'await' in non-async function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of &lt;code&gt;await&lt;/code&gt; in a function that was possibly intended to be async but is actually missing the &lt;code&gt;async&lt;/code&gt; modifier.
&lt;!-- tooltip end --&gt;
Although &lt;code&gt;await&lt;/code&gt; can be used as an identifier, it is likely that it was intended to be used as an operator, so
the containing function should be made &lt;code&gt;async&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6TopLevelAwaitExpression" defaultSeverity="ERROR" displayName="Top-level 'await' expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a top-level &lt;code&gt;await&lt;/code&gt; expression.
&lt;!-- tooltip end --&gt;
While the new 'top-level async' proposal is on its way, using &lt;code&gt;await&lt;/code&gt; outside async functions is not allowed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSIgnoredPromiseFromCall" defaultSeverity="WEAK WARNING" displayName="Result of method call returning a promise is ignored" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call that returns a &lt;code&gt;Promise&lt;/code&gt; that is not used later.
Such calls are usually unintended and indicate an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6MissingAwait" defaultSeverity="WEAK WARNING" displayName="Missing await for an async function call" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;async&lt;/code&gt; function call without an expected &lt;code&gt;await&lt;/code&gt; prefix inside an &lt;code&gt;async&lt;/code&gt; function.
Such call returns a &lt;code&gt;Promise&lt;/code&gt; and control flow is continued immediately.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async function bar() { /* ... */ }
async function foo() {
    bar(); // bad
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
After the quick-fix is applied, the &lt;code&gt;await&lt;/code&gt; prefix is added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async function bar() { /* ... */ }
async function foo() {
    await bar(); // good
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;
When the 'Report for promises in return statements' checkbox is selected, also suggests adding &lt;code&gt;await&lt;/code&gt; in return statements.&lt;br/&gt;
While this is generally not necessary, it gives two main benefits.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;
You won't forget to add &lt;code&gt;await&lt;/code&gt; when surrounding your code with &lt;code&gt;try-catch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An explicit &lt;code&gt;await&lt;/code&gt; helps V8 runtime to provide &lt;a href="https://bit.ly/v8-zero-cost-async-stack-traces"&gt;async stack traces&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6RedundantAwait" defaultSeverity="WEAK WARNING" displayName="Redundant 'await' expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant usage of &lt;code&gt;await&lt;/code&gt;, such as &lt;code&gt;await await&lt;/code&gt;, or awaiting a non-promise result.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  When the 'Report for promises' option is selected, suggests removing &lt;code&gt;await&lt;/code&gt; before promises when applicable
  (in &lt;code&gt;return&lt;/code&gt; statements, and with &lt;code&gt;Promise.resolve/reject&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;Removing &lt;code&gt;await&lt;/code&gt; in such contexts causes two problems.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Surrounding your code with &lt;code&gt;try-catch&lt;/code&gt; and forgetting to add
    &lt;code&gt;await&lt;/code&gt; will change code semantics while you may fail to notice that.
  &lt;/li&gt;
  &lt;li&gt;
    Having an explicit &lt;code&gt;await&lt;/code&gt; may prevent the V8 runtime from providing
    &lt;a href="http://bit.ly/v8-zero-cost-async-stack-traces"&gt;async stack traces&lt;/a&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Flow type checker" path="JavaScript and TypeScript"><inspection shortName="FlowJSError" defaultSeverity="ERROR" displayName="Flow type checker" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports errors from &lt;a href="https://flowtype.org/"&gt;Flow&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FlowJSCoverage" defaultSeverity="WEAK WARNING" displayName="Code is not covered by Flow" enabled="false" language="Flow JS" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JavaScript code fragments that are not covered by the Flow type checker.
To use this inspection, configure the Flow executable in &lt;a href="settings://Settings.JavaScript"&gt;Settings | Languages &amp;amp; Frameworks | JavaScript&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FlowJSConfig" defaultSeverity="WARNING" displayName="Missing .flowconfig" enabled="true" language="Flow JS" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript file with a &lt;code&gt;@flow&lt;/code&gt; flag  that doesn't have an associated &lt;code&gt;.flowconfig&lt;/code&gt; file in the project.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FlowJSFlagCommentPlacement" defaultSeverity="WARNING" displayName="Misplaced @flow flag" enabled="true" language="Flow JS" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;@flow&lt;/code&gt; flag comment that is not located at the top of a file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code Coverage" path=""><inspection shortName="JsCoverageInspection" defaultSeverity="WARNING" displayName="Check JavaScript and TypeScript source code coverage" enabled="true" language="JavaScript" pluginId="org.intellij.qodana" pluginVersion="242.22855.79" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods, classes and files whose coverage is below a certain threshold.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSON and JSON5" path=""><inspection shortName="Json5StandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON5 standard" enabled="true" language="JSON5" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency with &lt;a href="http://json5.org"&gt;the language specification&lt;/a&gt; in a JSON5 file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonStandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON standard" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following discrepancies of a JSON file with  &lt;a href="https://tools.ietf.org/html/rfc7159"&gt;the language specification&lt;/a&gt;:
&lt;ul&gt;
  &lt;li&gt;A line or  block comment (configurable).&lt;/li&gt;
  &lt;li&gt;Multiple top-level values (expect for JSON Lines files, configurable for others).&lt;/li&gt;
  &lt;li&gt;A trailing comma in an object or array (configurable).&lt;/li&gt;
  &lt;li&gt;A single quoted string.&lt;/li&gt;
  &lt;li&gt;A property key is a not a double quoted strings.&lt;/li&gt;
  &lt;li&gt;A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated JSON property" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated property in a JSON file.&lt;br&gt;
Note that deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard extension 'deprecationMessage'.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaRefReference" defaultSeverity="WARNING" displayName="Unresolved '$ref' and '$schema' references" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;code&gt;$ref&lt;/code&gt; or &lt;code&gt;$schema&lt;/code&gt; path in a JSON schema.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonDuplicatePropertyKeys" defaultSeverity="WARNING" displayName="Duplicate keys in object literals" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate key in an object literal.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaCompliance" defaultSeverity="WARNING" displayName="Compliance with JSON schema" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistence between a JSON file and the &lt;a href="https://json-schema.org"&gt;JSON schema&lt;/a&gt; that is assigned to it.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Handlebars/Mustache" path=""><inspection shortName="HbEmptyBlock" defaultSeverity="WARNING" displayName="Missing block helper argument" enabled="true" language="Handlebars" pluginId="com.dmarcotte.handlebars" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;each&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt; block helper without an argument.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Cucumber" path=""><inspection shortName="CucumberTableInspection" defaultSeverity="WARNING" displayName="Unused or missing columns in Cucumber tables" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports tables in &lt;code&gt;Examples&lt;/code&gt; sections in Cucumber .feature files with unused or missing columns.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GherkinMisplacedBackground" defaultSeverity="ERROR" displayName="Misplaced background section" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Background&lt;/code&gt; sections that are located incorrectly. The &lt;code&gt;Background&lt;/code&gt; section must be located before the
&lt;code&gt;Scenario&lt;/code&gt; section.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GherkinScenarioToScenarioOutline" defaultSeverity="ERROR" displayName="Scenario with Examples section" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Gherkin scenarios that contain an &lt;code&gt;Examples&lt;/code&gt; section.
&lt;p&gt;Use the quick-fix to convert &lt;code&gt;Scenario&lt;/code&gt; to &lt;code&gt;Scenario Outline&lt;/code&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CucumberUndefinedStep" defaultSeverity="WARNING" displayName="Undefined step" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports steps in Cucumber (or some other Gherkin) .feature files that do not have matching step definitions.
&lt;p&gt;Use the quick-fix to automatically create a new step definition.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CucumberMissedExamples" defaultSeverity="ERROR" displayName="Missing examples section" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
    Reports scenario outlines in Cucumber .feature files that do not have the &lt;code&gt;Examples&lt;/code&gt; section.
    &lt;p&gt;Use the quick-fix to automatically create the &lt;code&gt;Examples&lt;/code&gt; section with a pre-filled table header.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GherkinBrokenTableInspection" defaultSeverity="ERROR" displayName="Gherkin table is broken" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a table if there is at least one row with the number of cells different from the number of cells in the table header.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CucumberExamplesColon" defaultSeverity="ERROR" displayName="Missing ':' after examples keyword" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Examples&lt;/code&gt; sections in Cucumber .feature files if they do not have ':' after the &lt;code&gt;Examples&lt;/code&gt; keyword.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Naming conventions" path="JavaScript and TypeScript"><inspection shortName="ParameterNamingConventionJS" defaultSeverity="WARNING" displayName="Function parameter naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function parameter whose name is too short,
too long, or doesn't follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression
  expected for local variables names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSNonASCIINames" defaultSeverity="WARNING" displayName="Identifiers with non-ASCII symbols" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-ASCII symbol in a name.&lt;br/&gt;&lt;br/&gt;
If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.&lt;br/&gt;
Otherwise reports all names that contain both ASCII and non-ASCII symbols.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionNamingConventionJS" defaultSeverity="WARNING" displayName="Function naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function whose name is too short, too
long, or does not follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length, and a regular expression
for function names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format for regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LocalVariableNamingConventionJS" defaultSeverity="WARNING" displayName="Local variable naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a local variable whose name is  too short, too
long, or doesn't follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length, and a regular expression
  expected for local variables names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSClassNamingConvention" defaultSeverity="WARNING" displayName="Class naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class or a function that is annotated with a JSDoc &lt;code&gt;@constructor&lt;/code&gt; or &lt;code&gt;@class&lt;/code&gt; tag whose names are
too short, too long, or do not follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length, and a regular expression
  expected for classes names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format for regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path=""><inspection shortName="MaliciousLibrariesLocal" defaultSeverity="WARNING" displayName="Malicious dependency" enabled="true" pluginId="org.jetbrains.security.package-checker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports malicious NPM and PyPI dependencies declared in your project.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;Remove a malicious package to solve a problem.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="VulnerableLibrariesLocal" defaultSeverity="WARNING" displayName="Vulnerable declared dependency" enabled="true" pluginId="org.jetbrains.security.package-checker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project.
  A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;p&gt;The quick-fixes available may suggest updating to a safe version or visiting the website to learn more about a particular vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="HttpUrlsUsage" defaultSeverity="WEAK WARNING" displayName="Link with unencrypted protocol" enabled="true" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks
  are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,
  instead.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP"&gt;HTTPS: Difference from HTTP (wikipedia.org)&lt;/a&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="EditorConfig" path=""><inspection shortName="EditorConfigHeaderUniqueness" defaultSeverity="WARNING" displayName="EditorConfig section is not unique" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that define the same file pattern as other sections.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigShadowedOption" defaultSeverity="WARNING" displayName="Overridden property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are already defined in other sections.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes all &lt;code&gt;*.java&lt;/code&gt; files too but it  also redefines indent_size.
As a result the value 2 will be used for files matching &lt;code&gt;*.java&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigReferenceCorrectness" defaultSeverity="ERROR" displayName="Invalid reference" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports identifiers that are either unknown or have a wrong type.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPartialOverride" defaultSeverity="WEAK WARNING" displayName="Overlapping sections" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example:
&lt;code&gt;[{foo,bar}]&lt;/code&gt; and &lt;code&gt;[{foo,bas}]&lt;/code&gt; both contain “foo”.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEncoding" defaultSeverity="WARNING" displayName="File encoding doesn't match EditorConfig charset" enabled="true" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that current file encoding matches the encoding defined in "charset" property of .editorconfig file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigRootDeclarationCorrectness" defaultSeverity="ERROR" displayName="Unexpected top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigCharClassLetterRedundancy" defaultSeverity="WARNING" displayName="Duplicate character class letter" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example &lt;code&gt;[aa]&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigMissingRequiredDeclaration" defaultSeverity="ERROR" displayName="Required declarations are missing" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that miss the required declarations. Refer to the documentation for more information.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigNoMatchingFiles" defaultSeverity="WARNING" displayName="No matching files" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with wildcard patterns that do not match any files under the directory in
which the &lt;code&gt;.editorconfig&lt;/code&gt; file is located.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEmptySection" defaultSeverity="WARNING" displayName="Empty section" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that do not contain any EditorConfig properties.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEmptyHeader" defaultSeverity="ERROR" displayName="Empty header" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by &lt;code&gt;gitignore&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigUnexpectedComma" defaultSeverity="ERROR" displayName="Unexpected comma" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigSpaceInHeader" defaultSeverity="WEAK WARNING" displayName="Space in file pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports space characters in wildcard patterns that affect pattern matching.
If these characters are not intentional, they should be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigWildcardRedundancy" defaultSeverity="WARNING" displayName="Redundant wildcard" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcards that become redundant when the “**” wildcard is used in the same section.
&lt;p&gt;
The “**” wildcard defines a broader set of files than any other wildcard.
That is why, any other wildcard used in the same section has no affect and can be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPatternRedundancy" defaultSeverity="WARNING" displayName="Duplicate or redundant pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one.
For example, in &lt;code&gt;[{*.java,*}]&lt;/code&gt; the first &lt;code&gt;*.java&lt;/code&gt; pattern defines a narrower scope compared to &lt;code&gt;*&lt;/code&gt;.
That is why it is redundant and can be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigUnusedDeclaration" defaultSeverity="WARNING" displayName="Unused declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unused declarations. Such declarations can be removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigListAcceptability" defaultSeverity="ERROR" displayName="Unexpected value list" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigShadowingOption" defaultSeverity="WARNING" displayName="Overriding property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that override the same properties defined earlier in the file.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes the same files as &lt;code&gt;[*.java]&lt;/code&gt; but also sets indent_size to value 2.
Thus the first declaration &lt;code&gt;indent_size=4&lt;/code&gt;will be ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPairAcceptability" defaultSeverity="ERROR" displayName="Unexpected key-value pair" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports key-value pairs that are not allowed in the current context.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigCharClassRedundancy" defaultSeverity="WARNING" displayName="Unnecessary character class" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports character classes that consist of a single character.
Such classes can be simplified to a character, for example &lt;code&gt;[a]&lt;/code&gt;&amp;rarr;&lt;code&gt;a&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigDeprecatedDescriptor" defaultSeverity="WARNING" displayName="Deprecated property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports EditorConfig properties that are no longer supported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigValueUniqueness" defaultSeverity="ERROR" displayName="Non-unique list value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports duplicates in lists of values.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigOptionRedundancy" defaultSeverity="WARNING" displayName="Redundant property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are redundant when another applicable section already contains the same property and value.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code&gt;
[*]
indent_size=4
[*.java]
indent_size=4
&lt;/code&gt;&lt;/pre&gt;
are both applicable to &lt;code&gt;*.java&lt;/code&gt; files and define the same &lt;code&gt;indent_size&lt;/code&gt; value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigKeyCorrectness" defaultSeverity="WARNING" displayName="Unknown property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigValueCorrectness" defaultSeverity="ERROR" displayName="Invalid property value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”,
others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigRootDeclarationUniqueness" defaultSeverity="ERROR" displayName="Extra top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file.
Using multiple top-level declarations is not allowed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigPatternEnumerationRedundancy" defaultSeverity="ERROR" displayName="Unnecessary braces" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pattern lists that are either empty &lt;code&gt;{}&lt;/code&gt; or contain just one pattern, for example &lt;code&gt;{foo}&lt;/code&gt; in contrast to
a list containing multiple patterns, for example &lt;code&gt;{foo,bar}&lt;/code&gt;. In this case braces are handled as a part of the name. For example,
the pattern &lt;code&gt;*.{a}&lt;/code&gt; will match the file &lt;code&gt;my.{a}&lt;/code&gt; but not &lt;code&gt;my.a&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigVerifyByCore" defaultSeverity="ERROR" displayName="Invalid .editorconfig file" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Verifies the whole file using the backing EditorConfig core library and reports any failures.
Any such failure would prevent EditorConfig properties from being correctly applied.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigNumerousWildcards" defaultSeverity="WEAK WARNING" displayName="Too many wildcards" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="TypeScript" path="JavaScript and TypeScript"><inspection shortName="TypeScriptLibrary" defaultSeverity="ERROR" displayName="Missing global library" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a TypeScript library file that is required for a symbol but is not listed under the &lt;code&gt;lib&lt;/code&gt; compiler option in &lt;code&gt;tsconfig.json&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptValidateGenericTypes" defaultSeverity="ERROR" displayName="Incorrect generic type argument" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid type argument in a function, interface, or class declaration.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptJSXUnresolvedComponent" defaultSeverity="WEAK WARNING" displayName="Unresolved JSX component" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a JSX component.
Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.
&lt;p&gt;The template for a new component can be modified in Editor | File and Code Templates.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptUMDGlobal" defaultSeverity="WEAK WARNING" displayName="Referenced UMD global variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS).
Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptConfig" defaultSeverity="WARNING" displayName="Inconsistent tsconfig.json properties" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency  of a &lt;code&gt;paths&lt;/code&gt;, &lt;code&gt;checkJs&lt;/code&gt;, or &lt;code&gt;extends&lt;/code&gt; property in a tsconfig.json file.
&lt;br&gt;
The &lt;code&gt;checkJs&lt;/code&gt; property requires &lt;code&gt;allowJs&lt;/code&gt;.
&lt;br&gt;
The &lt;code&gt;extends&lt;/code&gt; property should be a valid file reference.

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptAbstractClassConstructorCanBeMadeProtected" defaultSeverity="WEAK WARNING" displayName="Abstract class constructor can be made protected" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptMissingAugmentationImport" defaultSeverity="INFORMATION" displayName="Missing augmentation import" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage from 
&lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation"&gt;augmentation module&lt;/a&gt; without an explicit import.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptValidateTypes" defaultSeverity="ERROR" displayName="Type mismatch" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a parameter, return value, or assigned expression of incorrect type.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptDuplicateUnionOrIntersectionType" defaultSeverity="WARNING" displayName="Duplicate union or intersection type component" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate type inside a union or intersection.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptSmartCast" defaultSeverity="WARNING" displayName="Narrowed type" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a variable where the variable type is narrowed by a type guard.
Note that severity level doesn't affect this inspection.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptMissingConfigOption" defaultSeverity="WARNING" displayName="Missing tsconfig.json option " enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage that requires an explicit option in &lt;code&gt;tsconfig.json&lt;/code&gt;.
For example, to use JSX in &lt;code&gt;.tsx&lt;/code&gt; files, &lt;code&gt;tsconfig.json&lt;/code&gt; must contain &lt;code&gt;"jsx"&lt;/code&gt; property.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptSuspiciousConstructorParameterAssignment" defaultSeverity="WARNING" displayName="Assigned constructor field parameter" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.&lt;br/&gt;
In this case, the corresponding field &lt;i&gt;won't&lt;/i&gt; be assigned, only the local parameter value is modified.
&lt;pre&gt;&lt;code&gt;
class Foo {
  constructor(private p: number) {
    p = 1; //must be this.p = 1;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptUnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved TypeScript reference" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference in TypeScript code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptExplicitMemberType" defaultSeverity="INFORMATION" displayName="Explicit types" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a type annotation that doesn't match the current code style for explicit types.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    var pi: number = 3.14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptFieldCanBeMadeReadonly" defaultSeverity="WEAK WARNING" displayName="Field can be readonly" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptRedundantGenericType" defaultSeverity="WEAK WARNING" displayName="Redundant type arguments" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a type argument that is equal to the default one and can be removed.
&lt;p&gt;
Example:
&lt;pre&gt;&lt;code&gt;
type Foo&amp;lt;T=number&amp;gt; = T;
let z: Foo&amp;lt;number&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptCheckImport" defaultSeverity="ERROR" displayName="Unresolved imported name" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved name or binding in an &lt;code&gt;import&lt;/code&gt; declaration in TypeScript code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSEqualityComparisonWithCoercion.TS" defaultSeverity="WARNING" displayName="Equality operator may cause type coercion" enabled="false" language="TypeScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of equality operators  may cause unexpected type coercions.
Suggests replacing &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; equality operators with type-safe &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;!==&lt;/code&gt; operators.

&lt;p&gt;Depending on the option selected, one of the following cases will be reported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;code&gt;x == null&lt;/code&gt; as a replacement for
    &lt;code&gt;x === null || x === undefined&lt;/code&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; comparisons
    with &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;,
    &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;,
    &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="DOM issues" path="JavaScript and TypeScript"><inspection shortName="InnerHTMLJS" defaultSeverity="WARNING" displayName="Use of 'innerHTML' property" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  a JavaScript access to DOM nodes as text using the &lt;code&gt;innerHTML&lt;/code&gt; property.
Most usages of &lt;code&gt;innerHTML&lt;/code&gt; are performed better with explicit
DOM calls, such as &lt;code&gt;getElementByID()&lt;/code&gt; and
&lt;code&gt;createElement()&lt;/code&gt;.  Additionally,
&lt;code&gt;innerHTML&lt;/code&gt; will not work with XML
DOMs, including DOMs for XHTML if viewed as XML.  This can lead to difficulties in
diagnosing bugs.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XHTMLIncompatabilitiesJS" defaultSeverity="WARNING" displayName="Incompatible XHTML usages" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports common JavaScript DOM patterns which may present problems
with XHTML documents. In particular, the patterns detected will behave completely
differently depending on whether the document is loaded as XML or HTML.
This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content.
Patterns detected include
&lt;b&gt;document.body&lt;/b&gt;,
&lt;b&gt;document.images&lt;/b&gt;,
&lt;b&gt;document.applets&lt;/b&gt;,
&lt;b&gt;document.links&lt;/b&gt;,
&lt;b&gt;document.forms&lt;/b&gt;, and
&lt;b&gt;document.anchors&lt;/b&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PlatformDetectionJS" defaultSeverity="WARNING" displayName="Inaccurate platform detection" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a common JavaScript pattern for detecting
the browser or operating system in which the script is run. In addition
to pointing out non-portable constructs, these platform detection patterns
are often incomplete and easily fooled. For most cases, detection of individual
environment features is preferable to attempting to detect the entire platform.
&lt;p&gt;Patterns detected include: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;document.all&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;document.layers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.userAgent&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.oscpu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.appName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.appCodeName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.platform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DocumentWriteJS" defaultSeverity="WARNING" displayName="Call to 'document.write()'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a method call to &lt;code&gt;document.write()&lt;/code&gt; or &lt;code&gt;document.writeln()&lt;/code&gt;.
Most usages of such calls are performed better with explicit
DOM calls, such as &lt;code&gt;getElementByID()&lt;/code&gt; and
&lt;code&gt;createElement()&lt;/code&gt;.  Additionally, the &lt;code&gt;write()&lt;/code&gt; and
&lt;code&gt;writeln()&lt;/code&gt; calls will not work with XML
DOMs, including DOMs for XHTML if viewed as XML.  This can result in difficulty to point out bugs.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Pug/Jade" path=""><inspection shortName="JadeTabsAndSpaces" defaultSeverity="ERROR" displayName="Tabs and spaces both used" enabled="true" language="Jade" pluginId="com.jetbrains.plugins.jade" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports use of spaces and tabs for indentation in a Pug file.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Dockerfile" path=""><inspection shortName="DockerFileAddOrCopyPaths" defaultSeverity="WARNING" displayName="Invalid destination for ''ADD''/''COPY'' commands" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid destination directories in &lt;code&gt;ADD&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/engine/reference/builder/#add"&gt;Dockerfile specification&lt;/a&gt;,
  if multiple sources are specified, then the destination must be a directory, and it must end with a slash '/'.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ADD textA.txt textB.txt relativeDir
  ADD ["binaryA.jar", "binary2.jar", "destination"]
  COPY text3.txt text4.txt /absolute/path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ADD textA.txt textB.txt relativeDir/
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY text3.txt text4.txt /absolute/path/
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileRunCommandMissingContinuation" defaultSeverity="ERROR" displayName="Missing continuation character for ''RUN'' command" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing continuation characters in &lt;code&gt;RUN&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;
  In the &lt;i&gt;shell&lt;/i&gt; form of &lt;code&gt;RUN&lt;/code&gt; command you should use a '\' (backslash)
  to continue a single &lt;code&gt;RUN&lt;/code&gt; instruction onto the next line.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # the command below will fail
  RUN /bin/bash -c 'source $HOME/.bashrc;
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN /bin/bash -c 'source $HOME/.bashrc; \
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileAssignments" defaultSeverity="ERROR" displayName="Invalid spaces in ''key=value'' pair" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports incorrect spacing for key-value pairs in &lt;code&gt;ARG&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt;, and &lt;code&gt;LABEL&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  While it is not explicitly specified in the &lt;a href="https://docs.docker.com/engine/reference/builder/#arg"&gt;Dockerfile specification&lt;/a&gt;,
  some combinations of spacing for key-value pairs are not allowed.
  Docker build will fail after reaching the problem instruction.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;ARG&lt;/code&gt; command does not allow any spaces around '='&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ENV&lt;/code&gt; and &lt;code&gt;LABEL&lt;/code&gt; do not allow spaces after '='&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ARG answer = 42
  ARG version= "1.0.0"
  LABEL "maintained.by"= someone@gmail.com
  ENV JAVA_HOME= "/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ARG answer=2
  ARG version="1.0.0"
  LABEL "maintained.by"=someone@gmail.com
  ENV JAVA_HOME="/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileArgumentCount" defaultSeverity="ERROR" displayName="Wrong number of arguments" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid number of arguments for the Dockerfile commands.&lt;/p&gt;
&lt;p&gt;
  Docker build will fail after reaching the instruction with an invalid number of arguments.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerJsonFormStringLiterals" defaultSeverity="WARNING" displayName="A single quoted string in JSON array format" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports a single quoted string in JSON array format.
&lt;/p&gt;
&lt;p&gt;
  JSON array form, must use double-quotes (") around words not single-quotes ('). Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  RUN ['/bin/bash', '-c', 'echo hello']
  ADD ['binaryA.jar', 'binary2.jar', 'destination/']
  COPY ['binaryA.jar', 'binary2.jar', 'destination/']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN ["/bin/bash", "-c", "echo hello"]
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY ["binaryA.jar", "binary2.jar", "destination/"]
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Potentially undesirable code constructs" path="JavaScript and TypeScript"><inspection shortName="BreakStatementJS" defaultSeverity="WARNING" displayName="'break' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;break&lt;/code&gt; statements. Ignores &lt;code&gt;break&lt;/code&gt; statements that end case blocks.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CommaExpressionJS" defaultSeverity="WARNING" displayName="Comma expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comma expression. Such
expressions are often a sign of overly clever code, and may lead to subtle bugs.
Comma expressions in the initializer or in the update section of &lt;code&gt;for&lt;/code&gt;
loops are ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatementWithLabelJS" defaultSeverity="WARNING" displayName="'continue' statement with label" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;continue&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BreakStatementWithLabelJS" defaultSeverity="WARNING" displayName="'break' statement with label" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;break&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WithStatementJS" defaultSeverity="WARNING" displayName="'with' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;with&lt;/code&gt; statements. Such 
statements result in potentially confusing implicit bindings, and may behave
strangely in setting new variables.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpressionJS" defaultSeverity="WARNING" displayName="Conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression.  Some coding standards
prohibit such expressions in favor of explicit &lt;code&gt;if&lt;/code&gt;
statements.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DebuggerStatementJS" defaultSeverity="WARNING" displayName="'debugger' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;debugger&lt;/code&gt; statement used for interaction
with the Javascript debuggers.  Such statements should not appear in production code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatementJS" defaultSeverity="WARNING" displayName="'continue' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;continue&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LabeledStatementJS" defaultSeverity="WARNING" displayName="Labeled statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled statement.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VoidExpressionJS" defaultSeverity="WARNING" displayName="'void' expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;void&lt;/code&gt; expression.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AnonymousFunctionJS" defaultSeverity="WARNING" displayName="Anonymous function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an anonymous function. An explicit name of a function expression may be helpful for debugging.
Ignores function expressions without names if they have a &lt;code&gt;name&lt;/code&gt; property specified in the ECMAScript 6 standard.
For example, &lt;code&gt;var bar = function() {};&lt;/code&gt; is not reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Version control" path=""><inspection shortName="IgnoreFileDuplicateEntry" defaultSeverity="WARNING" displayName="Ignore file duplicates" enabled="true" language="IgnoreLang" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore).
Duplicate entries in these files are redundant and can be removed.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    # Output directories
    /out/
    /target/
    /out/
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Accessibility" path="HTML"><inspection shortName="HtmlFormInputWithoutLabel" defaultSeverity="WARNING" displayName="Missing associated label" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a form element (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, or &lt;code&gt;select&lt;/code&gt;) without an associated label. Suggests creating a new label. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H44.html"&gt;H44&lt;/a&gt;.&lt;br&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredTitleAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'title' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing title attribute &lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;dl&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt; tags. Suggests adding a title attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H33.html"&gt;H33&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H40.html"&gt;H40&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H64.html"&gt;H64&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredLangAttribute" defaultSeverity="WARNING" displayName="Missing required 'lang' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;lang&lt;/code&gt; (or &lt;code&gt;xml:lang&lt;/code&gt;) attribute in a &lt;code&gt;html&lt;/code&gt; tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H57.html"&gt;H57&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredTitleElement" defaultSeverity="WARNING" displayName="Missing required 'title' element" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;title&lt;/code&gt; element inside a &lt;code&gt;head&lt;/code&gt; section. Suggests adding a &lt;code&gt;title&lt;/code&gt; element. The title should describe the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H25.html"&gt;H25&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredAltAttribute" defaultSeverity="WARNING" displayName="Missing required 'alt' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;alt&lt;/code&gt; attribute in a &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;applet&lt;/code&gt; tag or in a &lt;code&gt;area&lt;/code&gt; element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H24.html"&gt;H24&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H35.html"&gt;H35&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H36.html"&gt;H36&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H37.html"&gt;H37&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredSummaryAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'summary' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;summary&lt;/code&gt; attribute in a &lt;code&gt;table&lt;/code&gt; tag. Suggests adding a&lt;code&gt;summary&lt;/code&gt; attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H73.html"&gt;H73&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="HTML" path=""><inspection shortName="HtmlUnknownAttribute" defaultSeverity="WARNING" displayName="Unknown attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedTag" defaultSeverity="WARNING" displayName="Obsolete tag" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedAttribute" defaultSeverity="WARNING" displayName="Obsolete attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 attribute.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAnchorTarget" defaultSeverity="WARNING" displayName="Unresolved fragment in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved last part of an URL after the &lt;code&gt;#&lt;/code&gt; sign.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlMissingClosingTag" defaultSeverity="INFORMATION" displayName="Missing closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML element without a closing tag.
Some coding styles require that HTML elements have closing tags even where this is optional.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!&amp;lt;/p&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlNonExistentInternetResource" defaultSeverity="WARNING" displayName="Unresolved web link" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved web link. Works by making network requests in the background.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckEmptyScriptTag" defaultSeverity="WARNING" displayName="Empty tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty tags that do not work in some browsers.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script/&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script&gt;&amp;lt;/script&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlExtraClosingTag" defaultSeverity="WARNING" displayName="Redundant closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant closing tags on empty elements, for example, &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;br&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;&amp;lt;/br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckImageSize" defaultSeverity="WARNING" displayName="Mismatched image size" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attribute value of a &lt;code&gt;img&lt;/code&gt; tag
that is different from the actual width and height of the referenced image.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlPresentationalElement" defaultSeverity="INFORMATION" displayName="Presentational tag" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTarget" defaultSeverity="WARNING" displayName="Unresolved file in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file in a link.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlWrongAttributeValue" defaultSeverity="WARNING" displayName="Wrong attribute value" enabled="true" language="HtmlCompatible" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect HTML attribute value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTag" defaultSeverity="WARNING" displayName="Unknown tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML tag. Suggests configuring tags that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckValidXmlInScriptTagBody" defaultSeverity="ERROR" displayName="Malformed content of 'script' tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports contents of &lt;code&gt;script&lt;/code&gt; tags that are invalid XML.&lt;br&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RequiredAttributes" defaultSeverity="WARNING" displayName="Missing required attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownBooleanAttribute" defaultSeverity="WARNING" displayName="Incorrect boolean attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unit testing" path="JavaScript and TypeScript"><inspection shortName="KarmaConfigFile" defaultSeverity="WARNING" displayName="Invalid Karma configuration file" enabled="true" language="JavaScript" pluginId="Karma" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
  Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example,  &lt;code&gt;karma.conf.js&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSTestFailedLine" defaultSeverity="WARNING" displayName="Highlight failure line in test code" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a failed method call or an assertion in a test.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Shell script" path=""><inspection shortName="ShellCheck" defaultSeverity="ERROR" displayName="ShellCheck" enabled="true" language="Shell Script" pluginId="com.jetbrains.sh" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports shell script bugs detected by the integrated &lt;a href="https://github.com/koalaman/shellcheck"&gt;ShellCheck&lt;/a&gt; static analysis tool.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code quality tools" path="JavaScript and TypeScript"><inspection shortName="JSHint" defaultSeverity="ERROR" displayName="JSHint" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a problem detected by the &lt;a href="https://jshint.com/"&gt;JSHint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Eslint" defaultSeverity="WARNING" displayName="ESLint" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://eslint.org"&gt;ESLint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;ESLint configuration file&lt;/a&gt; for each individual rule.
&lt;br/&gt;&lt;br/&gt;
Clear the  'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TsLint" defaultSeverity="WARNING" displayName="TSLint" enabled="false" language="TypeScript" pluginId="tslint" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://github.com/palantir/tslint"&gt;TSLint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://palantir.github.io/tslint/usage/configuration/"&gt;TSLint configuration file&lt;/a&gt; for each individual rule.
&lt;br/&gt;&lt;br/&gt;
Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StandardJS" defaultSeverity="ERROR" displayName="Standard code style" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://standardjs.com/"&gt;JavaScript Standard Style&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting severity in the editor is based on the severity level the linter reports.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Less" path=""><inspection shortName="LessUnresolvedMixin" defaultSeverity="WARNING" displayName="Unresolved mixin" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a &lt;a href="http://lesscss.org/features/#mixins-feature"&gt;Less mixin&lt;/a&gt; that is not resolved.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  .unknown-mixin();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LessUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved variable" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a &lt;a href="http://lesscss.org/features/#variables-feature"&gt;Less variable&lt;/a&gt; that is not resolved.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: @unknown-var;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LessResolvedByNameOnly" defaultSeverity="WEAK WARNING" displayName="Missing import" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a variable or mixin that is declared in another file, which is not explicitly
&lt;a href="http://lesscss.org/features/#import-atrules-feature"&gt;imported&lt;/a&gt; in the current file.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: @var-in-other-file;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Assignment issues" path="JavaScript and TypeScript"><inspection shortName="JSAssignmentUsedAsCondition" defaultSeverity="WARNING" displayName="Assignment used as condition" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/AssignmentUsedAsCondition.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment that is used as the condition of an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or
&lt;code&gt;do&lt;/code&gt; statement. Although occasionally intended,
this usage is confusing, and often indicates a typo
(for example, &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedAssignmentJS" defaultSeverity="WARNING" displayName="Nested assignment" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NestedAssignment.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment expression nested inside another expression, for example, &lt;code&gt;a = b = 1&lt;/code&gt;.
Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToFunctionParameterJS" defaultSeverity="WARNING" displayName="Assignment to function parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a function parameter, including increment and decrement operations.
Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceAssignmentWithOperatorAssignmentJS" defaultSeverity="WARNING" displayName="Assignment could be replaced with operator assignment" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ReplaceAssignmentWithOperatorAssignment.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.
&lt;p&gt;
  Example:
&lt;pre&gt;
&lt;code&gt;  x = x + 3;&lt;/code&gt;
  &lt;code&gt;x = x / 3;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied the result looks like:
&lt;pre&gt;
  &lt;code&gt;x += 3;&lt;/code&gt;
  &lt;code&gt;x /= 3;&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SillyAssignmentJS" defaultSeverity="WARNING" displayName="Variable is assigned to itself" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment in the form &lt;code&gt;x = x&lt;/code&gt;. 
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentResultUsedJS" defaultSeverity="WARNING" displayName="Result of assignment used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment expression where the result of the assignment is
used in the containing expression. Such assignments often indicate coding errors, 
for example,  &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;.
Moreover, they can result in confusion due to the order
of operations, as evaluation of the assignment may affect the outer expression in unexpected
ways.
&lt;p&gt;Expressions in parentheses are ignored.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToForLoopParameterJS" defaultSeverity="WARNING" displayName="Assignment to 'for' loop parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a variable declared as a &lt;code&gt;for&lt;/code&gt; loop parameter.
Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="YAML" path=""><inspection shortName="YAMLSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated YAML key" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated keys in YAML files.
&lt;p&gt;Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.&lt;/p&gt;
&lt;p&gt;Note that the deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard &lt;code&gt;deprecationMessage&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Scheme deprecation example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeDeprecatedProperty": {
        "deprecationMessage": "Baz",
        "description": "Foo bar"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeDeprecatedProperty: some value
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLRecursiveAlias" defaultSeverity="ERROR" displayName="Recursive alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports recursion in YAML aliases.
&lt;p&gt;Alias can't be recursive and be used inside the data referenced by a corresponding anchor.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    sub_key1: value1
    sub_key2: *some_anchor
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLSchemaValidation" defaultSeverity="WARNING" displayName="Validation by JSON Schema" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.
&lt;p&gt;&lt;b&gt;Scheme example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeNumberProperty": {
        "type": "number"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeNumberProperty: hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLUnusedAnchor" defaultSeverity="WARNING" displayName="Unused anchor" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused anchors.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    key1: value1
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLUnresolvedAlias" defaultSeverity="ERROR" displayName="Unresolved alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved aliases in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: *unknown_alias
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLIncompatibleTypes" defaultSeverity="WARNING" displayName="Suspicious type mismatch" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
myElements:
  - value1
  - value2
  - false # &amp;lt;- reported, because it is a boolean value, while other values are strings
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLDuplicatedKeys" defaultSeverity="ERROR" displayName="Duplicated YAML keys" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated keys in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  same_key: some value
  same_key: another value
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Proofreading" path=""><inspection shortName="SpellCheckingInspection" defaultSeverity="TYPO" displayName="Typo" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;&lt;body&gt;Reports typos and misspellings in your code, comments, and literals and fixes them with one click.&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="LanguageDetectionInspection" defaultSeverity="WARNING" displayName="Natural language detection" enabled="true" pluginId="tanvd.grazi" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;Detects natural languages and suggests enabling corresponding grammar and spelling checks.&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="GrazieInspection" defaultSeverity="GRAMMAR_ERROR" displayName="Grammar" enabled="true" pluginId="tanvd.grazi" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;
Reports grammar mistakes in your text. You can configure the inspection in
&lt;a href="settings://reference.settingsdialog.project.grazie"&gt;Settings | Editor | Natural Languages | Grammar&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;&lt;/html&gt;
</inspection></group><group name="XML" path=""><inspection shortName="XmlWrongRootElement" defaultSeverity="ERROR" displayName="Wrong root element" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a root tag name different from the name specified in the &lt;code&gt;&amp;lt;doctype&amp;gt;&lt;/code&gt; tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlInvalidId" defaultSeverity="ERROR" displayName="Unresolved 'id' reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;code&gt;id&lt;/code&gt; reference in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckXmlFileWithXercesValidator" defaultSeverity="ERROR" displayName="Failed external validation" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckTagEmptyBody" defaultSeverity="WARNING" displayName="Empty element content" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports XML elements without contents.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name&gt;&amp;lt;/name&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name/&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDuplicatedId" defaultSeverity="ERROR" displayName="Duplicate 'id' attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate &lt;code&gt;id&lt;/code&gt; attribute in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlHighlighting" defaultSeverity="ERROR" displayName="XML highlighting" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports XML validation problems in the results of a batch code inspection.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnusedNamespaceDeclaration" defaultSeverity="WARNING" displayName="Unused schema declaration" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused namespace declaration or location hint in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDeprecatedElement" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated XML element or  attribute.
&lt;p&gt;Symbols can be marked by XML comment or documentation tag with text 'deprecated'.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckDtdRefs" defaultSeverity="ERROR" displayName="Unresolved DTD reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration.
Works in DTD an XML files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnboundNsPrefix" defaultSeverity="WARNING" displayName="Unbound namespace prefix" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unbound namespace prefix in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlPathReference" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDefaultAttributeValue" defaultSeverity="WARNING" displayName="Redundant attribute with default value" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant assignment of the default value to an XML attribute.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved references" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved references in XML.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style issues" path="CSS"><inspection shortName="CssMissingSemicolon" defaultSeverity="WARNING" displayName="Missing semicolon" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing semicolon at the end of a declaration.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssRedundantUnit" defaultSeverity="WARNING" displayName="Redundant measure unit" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a measure unit of a zero value where units are not required by the specification.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;width: 0px&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path="JavaScript and TypeScript"><inspection shortName="JSClosureCompilerSyntax" defaultSeverity="WARNING" displayName="Incorrect usage of JSDoc tags" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports warnings implied by &lt;em&gt;Google Closure Compiler&lt;/em&gt; annotations including correct use of &lt;code&gt;@abstract&lt;/code&gt;, &lt;code&gt;@interface&lt;/code&gt;, and &lt;code&gt;@implements&lt;/code&gt; tags.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSNonStrictModeUsed" defaultSeverity="WARNING" displayName="Non-strict mode used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript file that is not in the &lt;code&gt;strict&lt;/code&gt; mode.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSValidateJSDoc" defaultSeverity="WARNING" displayName="Syntax errors and unresolved references in JSDoc" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax discrepancy in a documentation comment.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnnecessarySemicolon" defaultSeverity="WARNING" displayName="Unnecessary semicolon" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unneeded semicolon.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXSyntaxUsed" defaultSeverity="ERROR" displayName="JSX syntax used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a JSX tag in JavaScript code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSLastCommaInObjectLiteral" defaultSeverity="WARNING" displayName="Unneeded last comma in object literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of a trailing comma in object literals.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSCommentMatchesSignature" defaultSeverity="WARNING" displayName="Mismatched JSDoc and function signature" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function.
Suggests updating parameters in JSDoc comment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param height Height in pixels
 */
function sq(height, width) {} // width is not documented
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param height Height in pixels
 * @param width
 */
function sq(height, width) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedReference" defaultSeverity="WEAK WARNING" displayName="Unresolved reference" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference in JavaScript code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSJoinVariableDeclarationAndAssignment" defaultSeverity="INFORMATION" displayName="Variable declaration can be merged with the first assignment to the variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDeprecatedSymbols" defaultSeverity="WEAK WARNING" displayName="Deprecated symbol used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a deprecated function variable.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPrimitiveTypeWrapperUsage" defaultSeverity="WARNING" displayName="Primitive type object wrapper used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an improper usage of a wrapper for primitive types or a property of a primitive type being
modified, as in the latter case the assigned value will be lost.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAnnotator" defaultSeverity="ERROR" displayName="ECMAScript specification is not followed" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.
&lt;br&gt;
Generally, such errors must always be reported and shouldn't be disabled.
But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAccessibilityCheck" defaultSeverity="WARNING" displayName="Inaccessible @private and @protected members referenced" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a JavaScript member that is marked with a &lt;code&gt;@private&lt;/code&gt; or &lt;code&gt;@protected&lt;/code&gt; tag but
does not comply with visibility rules that these tags imply.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDuplicatedDeclaration" defaultSeverity="WARNING" displayName="Duplicate declaration" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple declarations in a scope.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSJQueryEfficiency" defaultSeverity="WARNING" displayName="JQuery selector can be optimized" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMismatchedCollectionQueryUpdate" defaultSeverity="WARNING" displayName="Mismatched query and update of collection" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a collection of fields or variables whose contents are either queried and not updated
or updated and not queried. Such mismatched queries and updates are pointless
and may indicate either dead code or a typographical error.
&lt;p&gt;
Query methods are automatically detected, based on whether they return something, or a callback is passed to them.
Use the table below to specify which methods are update methods.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUndeclaredVariable" defaultSeverity="WEAK WARNING" displayName="Implicitly declared global JavaScript variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an implicit declaration of a global variable.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var aaa = 1; // good
  bbb = 2; // bad, if bbb is not declared with 'var' somewhere
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMethodCanBeStatic" defaultSeverity="INFORMATION" displayName="Method can be made 'static'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class method that can be safely made &lt;code&gt;static&lt;/code&gt;.
A method can be &lt;code&gt;static&lt;/code&gt; if it does not reference any of its class' non-static methods
and non-static fields and is not overridden in a subclass.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the first checkbox below to inspect only &lt;code&gt;private&lt;/code&gt;  methods.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSLastCommaInArrayLiteral" defaultSeverity="WARNING" displayName="Unneeded last comma in array literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a trailing comma in an array literal.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;. &lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSReferencingMutableVariableFromClosure" defaultSeverity="WARNING" displayName="Referencing mutable variable from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to outer mutable variables from functions. 
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (var i = 1; i &amp;lt;= 3; i++) {
    setTimeout(function() {
        console.log(i); // bad
    }, 0);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSCheckFunctionSignatures" defaultSeverity="WEAK WARNING" displayName="Signature mismatch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number.
Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.

&lt;p&gt;TypeScript code is ignored.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedLibraryURL" defaultSeverity="WARNING" displayName="Missed locally stored library for HTTP link" enabled="true" language="HTML" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a URL of an external JavaScript library that is not associated with
any locally stored file. Suggests downloading the library.
Such association enables the IDE to provide proper code completion and navigation. 
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WebpackConfigHighlighting" defaultSeverity="WARNING" displayName="Webpack config compliance with JSON Schema" enabled="true" language="JavaScript" pluginId="intellij.webpack" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Validates options in  webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`)
against &lt;a href="https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json"&gt;webpack options schema&lt;/a&gt;.
&lt;br/&gt;&lt;br/&gt;
Disable this inspection to turn off validation and code completion inside the configuration object.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnfilteredForInLoop" defaultSeverity="WARNING" displayName="Unfiltered for..in loop" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unfiltered &lt;code&gt;for-in&lt;/code&gt; loops.
&lt;br/&gt;&lt;br/&gt;
The use of this construct results in processing not only own properties of an object but properties from its prototype as well.
It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties
or when &lt;code&gt;Object&lt;/code&gt;'s prototype may be incorrectly modified.
For example, the following code will print &lt;b&gt;42&lt;/b&gt; and &lt;b&gt;myMethod&lt;/b&gt;:
&lt;br/&gt;&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;
Object.prototype.myMethod = function myMethod() {};
let a = { foo: 42 };
for (let i in a) {
  console.log(a[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suggests replacing the whole loop with a &lt;code&gt;Object.keys()&lt;/code&gt; method or adding a &lt;code&gt;hasOwnProperty()&lt;/code&gt; check. After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
for (let i in a) {
  if (a.hasOwnProperty(i)) {
    console.log(a[i]);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSFileReferences" defaultSeverity="WARNING" displayName="Unresolved file reference" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6DestructuringVariablesMerge" defaultSeverity="WEAK WARNING" displayName="Destructuring properties with the same key" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple destructuring properties with identical keys. Suggests merging the properties.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXUnresolvedComponent" defaultSeverity="WEAK WARNING" displayName="Unresolved JSX component" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a JSX component.
Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.
&lt;p&gt;The template for a new component can be modified in Editor | File and Code Templates.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ClassMemberInitializationOrder" defaultSeverity="WARNING" displayName="Use of possibly unassigned property in a static initializer" enabled="true" language="ECMAScript 6" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.
&lt;br/&gt;&lt;br/&gt;
Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSValidateTypes" defaultSeverity="WEAK WARNING" displayName="Type mismatch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect type of: 
&lt;ul&gt;
  &lt;li&gt;a parameter in a function call&lt;/li&gt;
  &lt;li&gt;a return value&lt;/li&gt;
  &lt;li&gt;an assigned expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TypeScript code is ignored.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6PreferShortImport" defaultSeverity="WARNING" displayName="Import can be shortened" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an ES6 import whose &lt;code&gt;from&lt;/code&gt; part can be shortened. Suggests importing the parent directory.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6RedundantNestingInTemplateLiteral" defaultSeverity="WEAK WARNING" displayName="Redundant nesting in template literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = `Hello, ${`Brave ${"New"}`} ${"World"}!`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = `Hello, Brave New World!`
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedExtXType" defaultSeverity="WARNING" displayName="Unresolved Ext JS xtype" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an Ext JS &lt;code&gt;xtype&lt;/code&gt; reference that doesn't have a corresponding class.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ShorthandObjectProperty" defaultSeverity="INFORMATION" displayName="Property can be replaced with shorthand" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var obj = {foo:foo}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var obj = {foo}
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Imports and dependencies" path="JavaScript and TypeScript"><inspection shortName="NpmUsedModulesInstalled" defaultSeverity="WEAK WARNING" displayName="Missing module dependency" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a module from a &lt;code&gt;require()&lt;/code&gt; call or an &lt;code&gt;import&lt;/code&gt; statement that is not installed or is not listed in package.json dependencies.
&lt;p&gt;Suggests installing the module and/or including it into package.json.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;require()&lt;/code&gt; calls, works only in the files from the scope of &lt;em&gt;Node.js Core&lt;/em&gt; JavaScript library.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UpdateDependencyToLatestVersion" defaultSeverity="INFORMATION" displayName="Update package.json dependencies to latest versions" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUrlImportUsage" defaultSeverity="INFORMATION" displayName="URL import is used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks used URL imports in the JavaScript language.
Suggests downloading the module for the specified remote URL.
Such association enables the IDE to provide proper code completion and navigation.
&lt;br/&gt;
&lt;br/&gt;
URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXNamespaceValidation" defaultSeverity="INFORMATION" displayName="Missing JSX namespace" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a JSX construction without importing namespace.
Having the namespace in the file scope ensures proper code compilation.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6UnusedImports" defaultSeverity="WARNING" displayName="Unused import" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant &lt;code&gt;import&lt;/code&gt; statement.
This is usually the case if the imported symbols are not used in the source file.
To avoid side-effects, consider using bare import &lt;code&gt;import 'packageName'&lt;/code&gt; instead of the regular one.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageJsonMismatchedDependency" defaultSeverity="WARNING" displayName="Mismatched dependencies in package.json" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a dependency from package.json that is not installed or doesn't match the specified &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;version range&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Internationalization" path=""><inspection shortName="NonAsciiCharacters" defaultSeverity="WARNING" displayName="Non-ASCII characters" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code elements that use non-ASCII symbols in an unusual context.

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-ASCII characters used in identifiers, strings, or comments.&lt;/li&gt;
  &lt;li&gt;Identifiers written in different languages, such as &lt;code&gt;my&lt;b&gt;С&lt;/b&gt;ollection&lt;/code&gt; with the
    letter &lt;code&gt;&lt;b&gt;C&lt;/b&gt;&lt;/code&gt; written in Cyrillic.&lt;/li&gt;
  &lt;li&gt;Comments or strings containing Unicode symbols, such as long dashes and arrows.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LossyEncoding" defaultSeverity="WARNING" displayName="Lossy encoding" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;

Reports characters that cannot be displayed because of the current document encoding.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you type international characters in a document with the &lt;b&gt;US-ASCII&lt;/b&gt; charset, some characters will be lost on save.&lt;/li&gt;
  &lt;li&gt;If you load a &lt;b&gt;UTF-8&lt;/b&gt;-encoded file using the &lt;b&gt;ISO-8859-1&lt;/b&gt; one-byte charset, some characters will be displayed incorrectly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can fix this by changing the file encoding
either by specifying the encoding directly in the file, e.g. by editing &lt;code&gt;encoding=&lt;/code&gt; attribute in the XML prolog of XML file,
  or by changing the corresponding options in &lt;b&gt;Settings | Editor | File Encodings&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path="JavaScript and TypeScript"><inspection shortName="NpmVulnerableApiCode" defaultSeverity="WARNING" displayName="Vulnerable API usage" enabled="true" language="JavaScript" pluginId="org.jetbrains.security.package-checker" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports usages of Vulnerable APIs of imported dependencies.&lt;/p&gt;
&lt;p&gt;Fixing the reported problems helps prevent your software from being compromised by an attacker.&lt;/p&gt;
&lt;p&gt;To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Code quality tools" path="CSS"><inspection shortName="Stylelint" defaultSeverity="ERROR" displayName="Stylelint" enabled="false" language="CSS" pluginId="com.intellij.stylelint" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="http://stylelint.io"&gt;Stylelint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://stylelint.io/user-guide/configure"&gt;Stylelint configuration file&lt;/a&gt; for each individual rule.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Function metrics" path="JavaScript and TypeScript"><inspection shortName="NestingDepthJS" defaultSeverity="WARNING" displayName="Overly nested function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function whose body contains statements that are too deeply nested within other statements.
Such functions may be confusing and indicate that refactoring may be necessary.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParametersPerFunctionJS" defaultSeverity="WARNING" displayName="Function with too many parameters" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with too many parameters.
Such functions often indicate problems with design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum acceptable number of parameters for a function.

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThreeNegationsPerFunctionJS" defaultSeverity="WARNING" displayName="Function with more than three negations" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with three or more negation operations (&lt;code&gt;!&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;).
Such functions may be unnecessarily confusing.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CyclomaticComplexityJS" defaultSeverity="WARNING" displayName="Overly complex function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions
may be confusing and hard to test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithMultipleLoopsJS" defaultSeverity="WARNING" displayName="Function with multiple loops" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with multiple loop statements.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StatementsPerFunctionJS" defaultSeverity="WARNING" displayName="Overly long function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an overly long function.
Function length is calculated by counting up the number of non-empty statements in the function.
Functions that are too long are error-prone and difficult to test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum acceptable number of statements in a function.

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithMultipleReturnPointsJS" defaultSeverity="WARNING" displayName="Function with multiple return points" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with multiple return points.
Such functions are hard to understand and maintain.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Potentially confusing code constructs" path="JavaScript and TypeScript"><inspection shortName="NegatedIfStatementJS" defaultSeverity="WARNING" displayName="Negated 'if' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements which have an &lt;b&gt;else&lt;/b&gt; branch and a negated condition.
Flipping the order of the &lt;b&gt;if&lt;/b&gt; and &lt;b&gt;else&lt;/b&gt;
branches will usually increase the clarity of such statements.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PointlessArithmeticExpressionJS" defaultSeverity="WARNING" displayName="Pointless arithmetic expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an arithmetic expression that include adding or subtracting zero, multiplying by
zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexBooleanExpressionJS" defaultSeverity="WARNING" displayName="Overly complex boolean expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexBooleanExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexArithmeticExpressionJS" defaultSeverity="WARNING" displayName="Overly complex arithmetic expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexArithmeticExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DynamicallyGeneratedCodeJS" defaultSeverity="WARNING" displayName="Execution of dynamically generated code" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a call of the &lt;code&gt;eval()&lt;/code&gt;, &lt;code&gt;setTimeout()&lt;/code&gt;,
or &lt;code&gt;setInterval()&lt;/code&gt; function or an allocation of a &lt;code&gt;Function&lt;/code&gt;
object.  These functions are used to execute arbitrary strings of JavaScript text, which often
dynamically generated.  This can be very confusing, and may be a security risk.
&lt;br/&gt;&lt;br/&gt;
Ignores the cases when a callback function is provided to these methods statically, without code generation.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallerJS" defaultSeverity="WARNING" displayName="Use of 'caller' property" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of the &lt;code&gt;caller&lt;/code&gt; property in a JavaScript function.
Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedConditionalExpressionJS" defaultSeverity="WARNING" displayName="Negated conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NegatedConditional.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a conditional expression whose condition is negated.
Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement.
Example: &lt;code&gt;!condition ? 2 : 1&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncrementDecrementResultUsedJS" defaultSeverity="WARNING" displayName="Result of increment or decrement used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an increment (&lt;code&gt;++&lt;/code&gt;) or decrement
(&lt;code&gt;--&lt;/code&gt;) expression where the result of the assignment is
used in a containing expression. Such assignments can result in confusion due to the order
of operations, as evaluation of the assignment may affect the outer expression in unexpected
ways. Example: &lt;code&gt;var a = b++&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingPlusesOrMinusesJS" defaultSeverity="WARNING" displayName="Confusing sequence of '+' or '-'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a suspicious combination of &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;
characters in JavaScript code (for example, &lt;code&gt;a+++b&lt;/code&gt;.  Such sequences are confusing,
and their semantics may change through changes in the whitespace.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyStatementBodyJS" defaultSeverity="WARNING" displayName="Statement with empty body" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt; statement with an empty body. Such statements often result from typos, and may cause confusion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to specify whether the statements with empty block statements as bodies 
should be reported.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingFloatingPointLiteralJS" defaultSeverity="WARNING" displayName="Confusing floating point literal" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConfusingFloatingPointLiteral.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any floating point number that does not have a decimal point, or any numbers before the decimal point,
or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedConditionalExpressionJS" defaultSeverity="WARNING" displayName="Nested conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression within another ternary condition.
Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional
logic.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MagicNumberJS" defaultSeverity="WARNING" displayName="Magic number" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/MagicNumber.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a "magic number" that is a numeric literal used without being named by a constant declaration.
Magic numbers can result in code whose intention is unclear, and may result in errors if a magic
number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000,
0.0 and 1.0 are ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BlockStatementJS" defaultSeverity="WARNING" displayName="Unnecessary block statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a block statement that is not used as the body of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;,
&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, or &lt;code&gt;try&lt;/code&gt; statements, or as the
body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables,
but still free-standing block statements may be confusing and result in subtle bugs when used with &lt;code&gt;var&lt;/code&gt; variables.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedFunctionJS" defaultSeverity="WARNING" displayName="Nested function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function nested inside another function.
Although JavaScript allows functions to be nested, such constructs may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to ignore anonymous nested functions.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Dev Container" path=""><inspection shortName="DevContainerIdeSettings" defaultSeverity="ERROR" displayName="Validate IDE settings" enabled="true" language="JSON" pluginId="org.jetbrains.plugins.docker.gateway" pluginVersion="242.22855.79" isGlobalTool="false"></inspection></group><group name="Invalid elements" path="CSS"><inspection shortName="CssUnknownUnit" defaultSeverity="ERROR" displayName="Unknown unit" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown unit.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidMediaFeature" defaultSeverity="ERROR" displayName="Invalid media feature" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;CSS media feature&lt;/a&gt;
or an incorrect media feature value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnresolvedCustomProperty" defaultSeverity="ERROR" displayName="Unresolved custom property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*"&gt;custom property&lt;/a&gt;
among the arguments of the &lt;code&gt;var()&lt;/code&gt; function.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidAtRule" defaultSeverity="ERROR" displayName="Unknown at-rule" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule"&gt;CSS at-rule&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCustomPropertyAtRuleDeclaration" defaultSeverity="ERROR" displayName="Invalid @property declaration" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing required &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/syntax"&gt;syntax&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/inherits"&gt;inherits&lt;/a&gt;, or &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/initial-value"&gt;initial-value&lt;/a&gt; property in a declaration of a custom property.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCharsetRule" defaultSeverity="WARNING" displayName="Misplaced or incorrect @charset" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a misplaced &lt;code&gt;@charset&lt;/code&gt; at-rule or an incorrect charset value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCustomPropertyAtRuleName" defaultSeverity="ERROR" displayName="Invalid @property name" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid custom property name. Custom property name should be prefixed with two dashes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@property invalid-property-name {
  ...
}

@property --valid-property-name {
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownProperty" defaultSeverity="WARNING" displayName="Unknown property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown CSS property or a property used in a wrong context.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Add the unknown property to the 'Custom CSS properties' list to skip validation.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnresolvedClassInComposesRule" defaultSeverity="ERROR" displayName="Unresolved class in 'composes' rule" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS class reference in the &lt;a href="https://github.com/css-modules/css-modules#composition"&gt;'composes'&lt;/a&gt;
rule that cannot be resolved to any valid target.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  .className {/* ... */}

  .otherClassName {
    composes: className;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidPseudoSelector" defaultSeverity="ERROR" displayName="Invalid pseudo-selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;pseudo-class&lt;/a&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;pseudo-element&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidNestedSelector" defaultSeverity="WARNING" displayName="Invalid nested selector" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a nested selector starting with an identifier or a functional notation.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidHtmlTagReference" defaultSeverity="WARNING" displayName="Invalid type selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors"&gt;type selector&lt;/a&gt; that matches an unknown HTML element.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidImport" defaultSeverity="WARNING" displayName="Misplaced @import" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a misplaced &lt;code&gt;@import&lt;/code&gt; statement.
&lt;p&gt;
  According to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"&gt;specification&lt;/a&gt;,
  &lt;code&gt;@import&lt;/code&gt; rules must precede all other types of rules, except &lt;code&gt;@charset&lt;/code&gt; rules.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssNegativeValue" defaultSeverity="ERROR" displayName="Negative property value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidPropertyValue" defaultSeverity="ERROR" displayName="Invalid property value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect CSS property value.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownTarget" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference, for example, an incorrect path in an &lt;code&gt;@import&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidFunction" defaultSeverity="ERROR" displayName="Invalid function" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions"&gt;CSS function&lt;/a&gt; or an incorrect function parameter.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PostCSS" path=""><inspection shortName="PostCssNesting" defaultSeverity="WARNING" displayName="Invalid nested rule" enabled="false" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a nested style rule whose syntax doesn't comply with the &lt;a href="https://github.com/postcss/postcss-nested"&gt;PostCSS Nested&lt;/a&gt;
or the &lt;a href="https://github.com/csstools/postcss-nesting"&gt;PostCSS Nesting&lt;/a&gt; specification.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.phone {
  &amp;_title {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssCustomSelector" defaultSeverity="ERROR" displayName="Invalid custom selector" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax error in &lt;a href="https://github.com/postcss/postcss-custom-selectors"&gt;PostCSS Custom Selector&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@custom-selector :--heading h1, h2, h3;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssUnresolvedModuleValueReference" defaultSeverity="ERROR" displayName="Unresolved CSS module value" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a &lt;a href="https://github.com/css-modules/postcss-modules-values"&gt;CSS Module Value&lt;/a&gt; (&lt;code&gt;@value&lt;/code&gt; declaration).
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@value foo from unknown;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssMediaRange" defaultSeverity="ERROR" displayName="Invalid media query range" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks &lt;a href="https://github.com/postcss/postcss-media-minmax"&gt;range context&lt;/a&gt; syntax, which may alternatively be used for
media features with a 'range' type.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@media screen and (500px &amp;lt;= width &amp;lt;= 1200px) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PostCssCustomMedia" defaultSeverity="ERROR" displayName="Invalid custom media" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax error in a &lt;a href="https://github.com/postcss/postcss-custom-media"&gt;PostCSS Custom Media&lt;/a&gt; query.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@custom-media --small-viewport (max-width: 30em);
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Bitwise operation issues" path="JavaScript and TypeScript"><inspection shortName="JSBitwiseOperatorUsage" defaultSeverity="WARNING" displayName="Bitwise operator usage" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a suspicious usage of a bitwise AND ("&lt;code&gt;&amp;&lt;/code&gt;") or OR ("&lt;code&gt;|&lt;/code&gt;") operator.
Usually it is a typo and the result of applying boolean operations AND ("&lt;code&gt;&amp;&amp;&lt;/code&gt;") and OR ("&lt;code&gt;||&lt;/code&gt;")  is expected.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ShiftOutOfRangeJS" defaultSeverity="WARNING" displayName="Shift operation by possibly wrong constant" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ShiftOutOfRange.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer
shift operation outside the range &lt;code&gt;0..31&lt;/code&gt;, shifting by negative or overly large values.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncompatibleMaskJS" defaultSeverity="WARNING" displayName="Incompatible bitwise mask operation" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/IncompatibleMask.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a bitwise mask expression which for sure 
evaluates to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
Expressions are of the form &lt;code&gt;(var &amp; constant1) == constant2&lt;/code&gt; or
&lt;code&gt;(var | constant1) == constant2&lt;/code&gt;, where &lt;code&gt;constant1&lt;/code&gt;
and &lt;code&gt;constant2&lt;/code&gt; are incompatible bitmask constants.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// Incompatible mask: as the last byte in mask is zero,
// something like 0x1200 would be possible, but not 0x1234
if ((mask &amp; 0xFF00) == 0x1234) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBitwiseExpressionJS" defaultSeverity="WARNING" displayName="Bitwise expression can be simplified" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/PointlessBitwiseExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an expression that includes &lt;code&gt;and&lt;/code&gt; with zero, &lt;code&gt;or&lt;/code&gt; by zero, or 
shifting by zero. Such expressions may result from not fully completed automated refactorings.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="EJS" path=""><inspection shortName="EjsUnresolvedInclude" defaultSeverity="WARNING" displayName="Unresolved include" enabled="true" language="EJS" pluginId="com.jetbrains.lang.ejs" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in an EJS include.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Try statement issues" path="JavaScript and TypeScript"><inspection shortName="ExceptionCaughtLocallyJS" defaultSeverity="WARNING" displayName="Exception used for local control-flow" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;throw&lt;/code&gt; statement whose exceptions are always
caught by the containing &lt;code&gt;try&lt;/code&gt; statement. Using &lt;code&gt;throw&lt;/code&gt;
statements as a &lt;code&gt;goto&lt;/code&gt; to change the local flow of control is confusing.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyCatchBlockJS" defaultSeverity="WARNING" displayName="Empty 'catch' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;catch&lt;/code&gt; block. This indicates that errors are simply ignored instead of handling them.
&lt;br/&gt;&lt;br/&gt;
Any comment in a &lt;code&gt;catch&lt;/code&gt; block mutes the inspection.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'return' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;return&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such &lt;code&gt;return&lt;/code&gt; statements may mask
exceptions thrown, and complicate debugging.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueOrBreakFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'continue' or 'break' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  a &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such statements are very confusing, may hide exceptions, and
complicate debugging.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'throw' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports s &lt;code&gt;throw&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such &lt;code&gt;throw&lt;/code&gt; statements may mask
exceptions thrown, and complicate debugging.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyTryBlockJS" defaultSeverity="WARNING" displayName="Empty 'try' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;try&lt;/code&gt; block, which usually indicates an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedCatchParameterJS" defaultSeverity="WARNING" displayName="Unused 'catch' parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;catch&lt;/code&gt; parameter that is not used in the
corresponding block.  The &lt;code&gt;catch&lt;/code&gt; parameters named
&lt;code&gt;ignore&lt;/code&gt; or &lt;code&gt;ignored&lt;/code&gt; are ignored.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
    Use the checkbox below to disable this inspection for &lt;code&gt;catch&lt;/code&gt;
    blocks with comments.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyFinallyBlockJS" defaultSeverity="WARNING" displayName="Empty 'finally' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;finally&lt;/code&gt; block, which usually indicates an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="JavaScript and TypeScript"><inspection shortName="JSPotentiallyInvalidTargetOfIndexedPropertyAccess" defaultSeverity="WARNING" displayName="Possibly incorrect target of indexed property access" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a potentially invalid indexed property access, for example, &lt;code&gt;Array[1]&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSuspiciousEqPlus" defaultSeverity="WARNING" displayName="Suspicious '=+' assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment in the form &lt;code&gt;a =+ b&lt;/code&gt;.
Suggests replacing with &lt;code&gt;a += b&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidUsageOfThis" defaultSeverity="WARNING" displayName="Potentially invalid reference to 'this' from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;this&lt;/code&gt; in closure that is used for referencing properties of outer context. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function Outer() {
  this.outerProp = 1;
  function inner() {
    // bad, because 'outerProp' of Outer
    // won't be updated here
    // on calling 'new Outer()' as may be expected
    this.outerProp = 2;
  }
  inner();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSComparisonWithNaN" defaultSeverity="WARNING" displayName="Comparison with NaN" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison with NaN. Comparisons like &lt;code&gt;expr == NaN&lt;/code&gt; or &lt;code&gt;expr === NaN&lt;/code&gt; are always evaluated to &lt;code&gt;false&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSVoidFunctionReturnValueUsed" defaultSeverity="WARNING" displayName="Void function return value used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a return value of a function that doesn't return anything.
Calling of such functions always produces an &lt;code&gt;undefined&lt;/code&gt; value and such assignment may indicate an error. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = console.log('foo');
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;
The following usages are ignored:
&lt;ul&gt;
  &lt;li&gt;Inside a return statement&lt;/li&gt;
  &lt;li&gt;In some binary operations&lt;/li&gt;
  &lt;li&gt;For overridden non-void functions&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSTypeOfValues" defaultSeverity="WARNING" displayName="'typeof' comparison with non-standard value" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison of a &lt;code&gt;typeof&lt;/code&gt; expression with a literal string which is not one of the standard types: &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, or &lt;code&gt;symbol&lt;/code&gt;.
Such comparisons always return &lt;code&gt;false&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidConstructorUsage" defaultSeverity="WARNING" displayName="Potentially invalid constructor usage" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after &lt;code&gt;new&lt;/code&gt;, using
a constructor's prototype or calling a constructor without &lt;code&gt;new&lt;/code&gt;. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc &lt;code&gt;@constructor&lt;/code&gt; tag.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSIncompatibleTypesComparison" defaultSeverity="WEAK WARNING" displayName="Comparison of expressions having incompatible types" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison with operands of incompatible types or an operand with a type without possible common values.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSuspiciousNameCombination" defaultSeverity="WARNING" displayName="Suspicious variable/parameter name combination" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/java/java-impl/src/inspectionDescriptions/SuspiciousNameCombination.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0;
  &lt;b&gt;var&lt;/b&gt; y = x;
&lt;/code&gt;&lt;/pre&gt;
or
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0, y = 0;
  &lt;b&gt;var&lt;/b&gt; rc = &lt;b&gt;new&lt;/b&gt; Rectangle(y, x, 20, 20);
&lt;/code&gt;&lt;/pre&gt;
Here the inspection guesses that &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are mixed up.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Specify the names that should not be used together. An error is reported
  if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed
  variable contains words from another group.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectAllocationIgnoredJS" defaultSeverity="WARNING" displayName="Result of object allocation ignored" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports object allocation where the result of the allocated object is ignored, for example, &lt;code&gt;new Error();&lt;/code&gt; as a statement, without any assignment.
Such allocation expressions may  indicate an odd object initialization strategy. 
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteLoopJS" defaultSeverity="WARNING" displayName="Infinite loop statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; statement which
can only exit by throwing an exception. Such statements often indicate coding errors.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSConsecutiveCommasInArrayLiteral" defaultSeverity="WARNING" displayName="Consecutive commas in array literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a consecutive comma in an array literal. The skipped element accepts the &lt;code&gt;undefined&lt;/code&gt; value,
but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSEqualityComparisonWithCoercion" defaultSeverity="WARNING" displayName="Equality operator may cause type coercion" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of an equality operator that may cause unexpected type coercions.
Suggests replacing  &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; with type-safe equality operators &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;.
&lt;p&gt;Depending on the option selected, one of the following cases will be reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;code&gt;x == null&lt;/code&gt; as a replacement for
    &lt;code&gt;x === null || x === undefined&lt;/code&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; comparisons
    with &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;,
    &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;,
    &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForLoopThatDoesntUseLoopVariableJS" defaultSeverity="WARNING" displayName="'for' loop where update or condition does not use loop variable" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt; loop where the condition or update does not use the &lt;code&gt;for&lt;/code&gt; loop variable.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6BindWithArrowFunction" defaultSeverity="WARNING" displayName="Suspicious usage of 'bind' with arrow function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  &lt;code&gt;bind&lt;/code&gt; used together with an arrow function.&lt;br/&gt;
Because arrow functions use lexical &lt;code&gt;this&lt;/code&gt;,  a &lt;code&gt;bind&lt;/code&gt; call will have no effect on them.&lt;br/&gt;
See &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this"&gt;here&lt;/a&gt; for details.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DivideByZeroJS" defaultSeverity="WARNING" displayName="Division by zero" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports division by zero or a remainder by zero.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteRecursionJS" defaultSeverity="WARNING" displayName="Infinite recursion" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function which must either recurse
infinitely or throw an exception. Such functions may not return normally.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidUsageOfClassThis" defaultSeverity="WARNING" displayName="Potentially invalid reference to 'this' of a class from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an attempt to reference a member of an ECMAScript class via the &lt;code&gt;this.&lt;/code&gt; qualifier in a nested function that is not a lambda.&lt;br/&gt;
&lt;code&gt;this&lt;/code&gt; in a nested function that is not a lambda is the function's own &lt;code&gt;this&lt;/code&gt; and doesn't relate to the outer class.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style issues" path="JavaScript and TypeScript"><inspection shortName="JSDeclarationsAtScopeStart" defaultSeverity="WEAK WARNING" displayName="'var' declared not at the beginning of a function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that declarations of local variables declared with &lt;b&gt;var&lt;/b&gt; are at the top of a function scope.
&lt;br/&gt;&lt;br/&gt;
By default, variable declarations are always moved ("hoisted") invisibly to the top of their containing scope when the code is executed.
Therefore, declaring them at the top of the scope helps represent this behavior in the code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedFunctionCallJS" defaultSeverity="WARNING" displayName="Nested function call" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call that is used as an argument in another function call, for example, &lt;code&gt;foo(bar())&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonBlockStatementBodyJS" defaultSeverity="WARNING" displayName="Statement body without braces" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt; statements whose body is not a block statement.  Using code block in statement bodies is usually safer for downstream maintenance.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedFunctionCallJS" defaultSeverity="WARNING" displayName="Chained function call" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call whose target is another function call, for example, &lt;code&gt;foo().bar()&lt;/code&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSArrowFunctionBracesCanBeRemoved" defaultSeverity="INFORMATION" displayName="Redundant braces around arrow function body" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an arrow function whose body only consists of braces and exactly one statement.
Suggests  converting to concise syntax without braces.
&lt;!-- tooltip end --&gt;
&lt;pre&gt;&lt;code&gt;
    let incrementer = (x) =&gt; {return x + 1};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code fragment looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    let incrementer = (x) =&gt; x + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantOnLHSOfComparisonJS" defaultSeverity="WARNING" displayName="Constant on left side of comparison" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a comparison operation with a constant value in the left-hand side. According to
coding conventions, constants should be in the right-hand side of comparisons.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantOnRHSOfComparisonJS" defaultSeverity="WARNING" displayName="Constant on right side of comparison" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a comparison operation with a constant in the right-hand side. According to 
coding conventions, constants should only be in the left-hand side of comparisons.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnterminatedStatementJS" defaultSeverity="WARNING" displayName="Unterminated statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a statement without a semicolon or a newline at the end.
&lt;p&gt;Select the 'Terminate statements with semicolons' option in &lt;i&gt;Editor | Code Style | JavaScript or TypeScript - Punctuation&lt;/i&gt; to report any statement that doesn't end with a semicolon, even if a newline is used.
According to  some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedEqualityJS" defaultSeverity="WARNING" displayName="Chained equality" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a chained equality comparison (i.e. &lt;code&gt;a==b==c&lt;/code&gt;).  Such comparisons are confusing.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUndefinedPropertyAssignment" defaultSeverity="WEAK WARNING" displayName="Undefined property assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a property that is not defined in the type of a variable. &lt;p&gt;Example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @type {{ property1: string, property2: number }}
 */
let myVariable = create();

myVariable.newProperty = 3; // bad
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSRemoveUnnecessaryParentheses" defaultSeverity="INFORMATION" displayName="Unnecessary parentheses" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant parentheses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;In expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var x = ((1) + 2) + 3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In arrow function argument lists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var incrementer = (x) =&gt; x + 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In TypeScript and Flow type declarations:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="typescript"&gt;type Card = (Suit &amp; Rank) | (Suit &amp; Number)&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="GitHub actions" path=""><inspection shortName="CyclicJobDependency" defaultSeverity="ERROR" displayName="Cyclic job dependency" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects cyclic dependencies for jobs in GitHub workflow YML file.
&lt;/p&gt;
&lt;p&gt;
  See the &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds"&gt;GitHub Actions documentation&lt;/a&gt; for more information on workflow syntax.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UndefinedAction" defaultSeverity="WARNING" displayName="Undefined action reference" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects unresolved action references in GitHub action and workflow files.
&lt;/p&gt;
&lt;p&gt;
  For more information on action references, see the &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MandatoryParamsAbsent" defaultSeverity="ERROR" displayName="Invalid action parameters" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports the absence of mandatory parameters that do not have a default value for an action. It also provides a Quick Fix by adding the missing parameters with an empty value.
&lt;/p&gt;
&lt;p&gt;
  For more information on action params, see the &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GithubFunctionSignatureValidation" defaultSeverity="WARNING" displayName="Standard library functions validation" enabled="true" language="GithubExpressionLanguage" pluginId="org.jetbrains.plugins.github" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports invalid GitHub Actions Expression language standard library function calls
&lt;p&gt;
  For more information on GitHub Actions Expression language, see the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/expressions"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IllegalJobDependency" defaultSeverity="ERROR" displayName="Undefined job dependency" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Detects dependencies to undefined Jobs in GitHub workflow YML file.
&lt;/p&gt;
&lt;p&gt;
  See the &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds"&gt;GitHub Actions documentation&lt;/a&gt; for more information on workflow syntax.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UndefinedParamsPresent" defaultSeverity="WARNING" displayName="Undefined action parameters" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.github" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports the presence of parameters which are not defined in an action. It also provides a Quick Fix by removing the undefined parameters.
&lt;/p&gt;
&lt;p&gt;
  For more information on action params, see the &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith"&gt;GitHub documentation&lt;/a&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="CSS" path=""><inspection shortName="CssUnusedSymbol" defaultSeverity="WARNING" displayName="Unused selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.
&lt;p&gt;
  Note that complete inspection results are available only when running it via &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt;.
  Due to performance reasons, style sheet files are not inspected on the fly.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssBrowserCompatibilityForProperties" defaultSeverity="WARNING" displayName="Property is incompatible with selected browsers" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS property that is not supported by the specified browsers.
Based on the &lt;a href="https://github.com/mdn/browser-compat-data"&gt;MDN Compatibility Data&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssConvertColorToHexInspection" defaultSeverity="WARNING" displayName="Color could be replaced with #-hex" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;rgb()&lt;/code&gt;, &lt;code&gt;hsl()&lt;/code&gt;, or other color function.
&lt;p&gt;Suggests replacing a color function with an equivalent hexadecimal notation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rgb(12, 15, 255)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#0c0fff&lt;/code&gt;.&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssConvertColorToRgbInspection" defaultSeverity="WARNING" displayName="Color could be replaced with rgb()" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;hsl()&lt;/code&gt; or &lt;code&gt;hwb()&lt;/code&gt; color function or a hexadecimal color notation.
&lt;p&gt;Suggests replacing such color value with an equivalent &lt;code&gt;rgb()&lt;/code&gt; or &lt;code&gt;rgba()&lt;/code&gt; color function.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#0c0fff&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rgb(12, 15, 255)&lt;/code&gt;.&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssReplaceWithShorthandSafely" defaultSeverity="WEAK WARNING" displayName="Properties may be safely replaced with a shorthand" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.
&lt;p&gt;
  For example, 4 properties: &lt;code&gt;padding-top&lt;/code&gt;, &lt;code&gt;padding-right&lt;/code&gt;, &lt;code&gt;padding-bottom&lt;/code&gt;, and
  &lt;code&gt;padding-left&lt;/code&gt;
  can be safely replaced with a single &lt;code&gt;padding&lt;/code&gt; property.
&lt;/p&gt;
&lt;p&gt;
  Note that this inspection doesn't show up if the set of longhand properties is incomplete
  (e.g. only 3 &lt;code&gt;padding-xxx&lt;/code&gt; properties in a ruleset)
  because switching to a shorthand may change the result.
  For such cases consider the 'Properties may probably be replaced with a shorthand'
  inspection.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssReplaceWithShorthandUnsafely" defaultSeverity="INFORMATION" displayName="Properties may probably be replaced with a shorthand" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form,
which is however not 100% equivalent in this case.
&lt;p&gt;
  For example, 2 properties: &lt;code&gt;outline-color&lt;/code&gt; and &lt;code&gt;outline-style&lt;/code&gt; may be replaced with a single &lt;code&gt;outline&lt;/code&gt;.
  Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.
  In this example, switching to the &lt;code&gt;outline&lt;/code&gt; shorthand means that &lt;code&gt;outline-width&lt;/code&gt; is also set to its initial value,
  which is &lt;code&gt;medium&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).
  For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssDeprecatedValue" defaultSeverity="ERROR" displayName="Deprecated value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssOverwrittenProperties" defaultSeverity="WARNING" displayName="Overwritten property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated CSS property within a ruleset. Respects shorthand properties.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.foo {
  margin-bottom: 1px;
  margin-bottom: 1px; /* duplicates margin-bottom */
  margin: 0; /* overrides margin-bottom */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Structural search" path=""><inspection shortName="SSBasedInspection" defaultSeverity="WARNING" displayName="Structural search inspection" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Allows configuring &lt;b&gt;Structural Search/Structural Replace&lt;/b&gt; templates that you can apply to the file you are editing.
&lt;/p&gt;
&lt;p&gt;All matches will be highlighted and marked with the template name that you have configured.
If you configure the &lt;b&gt;Structural Replace&lt;/b&gt; pattern as well, the corresponding replace option will be available as a quick-fix.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="React" path="JavaScript and TypeScript"><inspection shortName="JSXDomNesting" defaultSeverity="WARNING" displayName="Invalid DOM element nesting" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects HTML elements in JSX files which are not nested properly according to the DOM specification.
React reports runtime warnings on incorrectly nested elements.


&lt;!--Write your description here.--&gt;
&lt;!--Start the description with a verb in 3rd person singular, like reports, detects, highlights.--&gt;
&lt;!--In the first sentence, briefly explain what exactly the inspection helps you detect.--&gt;
&lt;!--Make sure the sentence is not very long and complicated.--&gt;
&lt;!--&lt;p&gt;--&gt;
&lt;!--  The first sentence must be in a dedicated paragraph separated from the rest of the text. This will make the description easier to read.--&gt;
&lt;!--  Make sure the description doesn’t just repeat the inspection title.--&gt;
&lt;!--&lt;/p&gt;--&gt;
&lt;!--&lt;p&gt;--&gt;
&lt;!--  See https://plugins.jetbrains.com/docs/intellij/inspections.html#descriptions for more information.--&gt;
&lt;!--&lt;/p&gt;--&gt;
&lt;!--&amp;lt;!&amp;ndash; tooltip end &amp;ndash;&amp;gt;--&gt;
&lt;!--&lt;p&gt;Text after this comment will only be shown in the settings of the inspection.&lt;/p&gt;--&gt;

&lt;!--&lt;p&gt;To open related settings directly from the description, add a link with `settings://$` optionally followed by `?$` to pre-select a UI--&gt;
&lt;!--  element.&lt;/p&gt;--&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Qodana" path=""><inspection shortName="QodanaSanity" defaultSeverity="ERROR" displayName="Sanity" enabled="false" pluginId="org.intellij.qodana" pluginVersion="242.22855.79" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports issues essential to this file like syntax errors, unresolved methods and variables, etc...
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Node.js" path="JavaScript and TypeScript"><inspection shortName="NodeCoreCodingAssistance" defaultSeverity="WARNING" displayName="Unresolved Node.js APIs" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests configuring coding assistance for Node.js, for example, &lt;code&gt;require&lt;/code&gt; and/or core modules ('path', 'http', 'fs', etc.).
&lt;p&gt;
See &lt;a href="https://nodejs.org/api/"&gt;https://nodejs.org/api/&lt;/a&gt; for the complete list.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unused symbols" path="JavaScript and TypeScript"><inspection shortName="JSUnusedAssignment" defaultSeverity="WARNING" displayName="Unused assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable whose value is never used after assignment.&lt;br&gt;
Suggests removing the unused variable to shorten the code and to avoid redundant allocations.
&lt;p&gt;The following cases are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A variable is never read after assignment.&lt;/li&gt;
  &lt;li&gt;The value of a variable is always overwritten with another assignment before the variable is read next time.&lt;/li&gt;
  &lt;li&gt;The initializer of a variable is redundant (for one of the above-mentioned reasons).&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnusedLocalSymbols" defaultSeverity="WARNING" displayName="Unused local symbol" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnusedGlobalSymbols" defaultSeverity="WARNING" displayName="Unused global symbol" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused globally accessible public function, variable, class, or property.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Markdown" path=""><inspection shortName="MarkdownUnresolvedLinkLabel" defaultSeverity="WARNING" displayName="Unresolved link label" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved link labels in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectlyNumberedListItem" defaultSeverity="WARNING" displayName="Incorrectly numbered list item" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Ordered list items are expected to have straight numeration starting from 1.&lt;/p&gt;
&lt;p&gt;The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; element for such list, that will number items continuously from 1.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownNoTableBorders" defaultSeverity="WARNING" displayName="Table doesn't have side borders" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table has correct side borders.
For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownLinkDestinationWithSpaces" defaultSeverity="WARNING" displayName="Links should not contain spaces" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
To ensure consistency between different tools, file links should not contain spaces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix replaces spaces with their url-encoded equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some%20file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedHeaderReference" defaultSeverity="WARNING" displayName="Unresolved header reference" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved header references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownOutdatedTableOfContents" defaultSeverity="WARNING" displayName="Outdated table of contents section" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if a particular table of contents section corresponds to the actual structure of the document.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectTableFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect table formatting" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table is correctly formatted.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedFileReference" defaultSeverity="WARNING" displayName="Unresolved file references" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in Markdown files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Data flow" path="JavaScript and TypeScript"><inspection shortName="ReuseOfLocalVariableJS" defaultSeverity="WARNING" displayName="Reuse of local variable" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reusing a local variable and overwriting its
value with a new value that is not related to the original variable usage.  Reusing a local variable in this way may be confusing
because the intended semantics of the local variable may vary with each usage.  It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live.   It is good practices to keep variable lifetimes as short as possible, and not
reuse local variables for the sake of brevity.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLocalVariableJS" defaultSeverity="WARNING" displayName="Redundant local variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary local variable that does not make
a function more comprehensible: &lt;ul&gt;
&lt;li&gt;a local variable that is immediately returned&lt;/li&gt;
&lt;li&gt;a local variable that is immediately assigned to another variable and is not used anymore&lt;/li&gt;
&lt;li&gt;a local variable that always has the same value as another local variable or parameter.&lt;/li&gt;&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore variables that are immediately
returned or thrown.  Some coding styles suggest using such variables for clarity and
ease of debugging.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="ES2015 migration aids" path="JavaScript and TypeScript"><inspection shortName="JSFunctionExpressionToArrowFunction" defaultSeverity="INFORMATION" displayName="Function expression is used instead of arrow function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;Reports a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"&gt;function&lt;/a&gt; expression.
Suggests converting it to an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow function&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.map(function(el) {return el + 1})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.map(el =&gt; el + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSStringConcatenationToES6Template" defaultSeverity="INFORMATION" displayName="String concatenation is used instead of template literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a string concatenation. Suggests replacing it with a  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literal&lt;/a&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; "result: " + a + "." &lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt; `result: ${a}.` &lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertVarToLetConst" defaultSeverity="WEAK WARNING" displayName="'var' is used instead of 'let' or 'const'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;var&lt;/code&gt; declaration that is used instead of &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;br/&gt;
Both &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are block-scoped and behave more strictly.
&lt;br/&gt;&lt;br/&gt;
Suggests replacing all &lt;code&gt;var&lt;/code&gt; declarations with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; declarations, depending on the semantics of a particular  value.
The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.
&lt;br/&gt;Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertRequireIntoImport" defaultSeverity="INFORMATION" displayName="'require()' is used instead of 'import'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;require()&lt;/code&gt; statement. Suggests converting  it to a &lt;code&gt;require()&lt;/code&gt; call with an &lt;code&gt;import&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Enable 'Convert require() inside inner scopes with Fix all action'
to convert all &lt;code&gt;require()&lt;/code&gt; calls inside the nested functions and statements when using the 'Fix all' action.
&lt;br/&gt;&lt;br/&gt;
Please note that converting &lt;code&gt;require()&lt;/code&gt; statements inside inner scopes to &lt;code&gt;import&lt;/code&gt; statements
may cause changes in the semantics of the code.
Import statements are static module dependencies and are hoisted,
which means that they are moved to the top of the current module. &lt;code&gt;require()&lt;/code&gt; calls load modules dynamically.
They can be executed conditionally, and their scope is defined by the expression in which they are used.
&lt;br/&gt;Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertToForOf" defaultSeverity="INFORMATION" displayName="'for..in' is used instead of 'for..of'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;for..in&lt;/a&gt;&lt;/code&gt;
loop on an array. Suggests replacing it with a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;for..of&lt;/a&gt;&lt;/code&gt; loop.
&lt;br/&gt;&lt;code&gt;for..of&lt;/code&gt; loops, which are introduced in ECMAScript 6, iterate over &lt;code&gt;iterable&lt;/code&gt; objects.
For arrays, this structure is preferable to &lt;code&gt;for..in&lt;/code&gt;, because it works only with array values but not with array object's properties.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertLetToConst" defaultSeverity="INFORMATION" displayName="'let' is used instead of 'const'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;let&lt;/code&gt; declaration that can be made &lt;code&gt;const&lt;/code&gt;.&lt;br/&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertIndexedForToForOf" defaultSeverity="INFORMATION" displayName="Indexed 'for' is used instead of 'for..of'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an indexed &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"&gt;for&lt;/a&gt;&lt;/code&gt;
loop used on an array. Suggests replacing it with a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;for..of&lt;/a&gt;&lt;/code&gt; loop.
&lt;br/&gt;&lt;code&gt;for..of&lt;/code&gt; loops are introduced in ECMAScript 6 and iterate over &lt;code&gt;iterable&lt;/code&gt; objects.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertModuleExportToExport" defaultSeverity="INFORMATION" displayName="'module.exports' is used instead of 'export'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;module.export&lt;/code&gt; statement. Suggests replacing it with an &lt;code&gt;export&lt;/code&gt; or &lt;code&gt;export default&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Please note that the quick-fix for converting &lt;code&gt;module.export&lt;/code&gt; into &lt;code&gt;export&lt;/code&gt; is not available for &lt;code&gt;module.export&lt;/code&gt; inside functions or statements because &lt;code&gt;export&lt;/code&gt; statements can only be at the top level of a module.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Validity issues" path="JavaScript and TypeScript"><inspection shortName="FunctionWithInconsistentReturnsJS" defaultSeverity="WARNING" displayName="Function with inconsistent returns" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function that returns a value in
some cases while in other cases no value is returned. This usually indicates an error.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function foo() {
  if (true)
    return 3;
  return;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSConstantReassignment" defaultSeverity="ERROR" displayName="Attempt to assign to const or readonly variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reassigning a value to a constant or a readonly variable.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BadExpressionStatementJS" defaultSeverity="WEAK WARNING" displayName="Expression statement which is not assignment or call" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an expression statement that is neither an assignment nor a call.
Such statements usually indicate an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSOctalInteger" defaultSeverity="ERROR" displayName="Octal integer" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated octal integer literal prefixed with &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;0o&lt;/code&gt;.&lt;br/&gt;
Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.&lt;br/&gt;
To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThisExpressionReferencesGlobalObjectJS" defaultSeverity="WARNING" displayName="'this' expression which references the global object" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;this&lt;/code&gt; expression outside an object literal or a constructor body.  Such &lt;code&gt;this&lt;/code&gt;
expressions reference the top-level "global" JavaScript object, 
but are mostly useless.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReservedWordUsedAsNameJS" defaultSeverity="WARNING" displayName="Reserved word used as name" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript reserved word used as a name.  The JavaScript specification
reserves a number of words which are currently not used as keywords.  Using those words as identifiers may
result in broken code if later versions of JavaScript start using them as keywords.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringLiteralBreaksHTMLJS" defaultSeverity="WARNING" displayName="String literal which breaks HTML parsing" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a string literal that contains a &lt;code&gt;&amp;lt;/&lt;/code&gt; sequence.  Such strings
may result in incorrect parsing of any HTML in which the JavaScript code is embedded.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Vue" path=""><inspection shortName="VueUnrecognizedSlot" defaultSeverity="WEAK WARNING" displayName="Unrecognized slot" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unrecognized Vue slot.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueMissingComponentImportInspection" defaultSeverity="WARNING" displayName="Missing component import" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDataFunction" defaultSeverity="WARNING" displayName="Data function" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a Vue component &lt;a href="https://vuejs.org/v2/api/#data"&gt;data&lt;/a&gt; property that is not a function. Suggests wrapping an object literal with a function.
&lt;p&gt;When defining a component, &lt;code&gt;data&lt;/code&gt; must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for &lt;code&gt;data&lt;/code&gt;, that very object will be shared by reference across all instances created! With a &lt;code&gt;data&lt;/code&gt; function,  every time a new instance is created we can simply call it to return a fresh copy of the initial data.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDuplicateTag" defaultSeverity="WARNING" displayName="Duplicate template/script tag" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple usages of the &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;script&lt;/code&gt; tag in a Vue file.
  &lt;p&gt;&lt;a href="https://vue-loader.vuejs.org/spec.html"&gt;Vue Component specification&lt;/a&gt; indicates that each &lt;code&gt;*.vue&lt;/code&gt; file can contain at most one &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;script&lt;/code&gt; block at a time.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueUnrecognizedDirective" defaultSeverity="WARNING" displayName="Unrecognized directive" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unrecognized Vue directive.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDeprecatedSymbol" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated Vue symbol.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RegExp" path=""><inspection shortName="CustomRegExpInspection" defaultSeverity="WARNING" displayName="Custom RegExp inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Custom Regex Inspection
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantClassElement" defaultSeverity="WEAK WARNING" displayName="Redundant '\d', '[:digit:]', or '\D' class elements" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;\d&lt;/code&gt; or &lt;code&gt;[:digit:]&lt;/code&gt; that are used in one class with &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;[:word:]&lt;/code&gt;
(&lt;code&gt;\D&lt;/code&gt; with &lt;code&gt;\W&lt;/code&gt;) and can be removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w\d]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEscapedMetaCharacter" defaultSeverity="INFORMATION" displayName="Escaped meta character" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports escaped meta characters.
Some RegExp coding styles specify that meta characters should be placed inside a character class,
to make the regular expression easier to understand.
This inspection does not warn about the meta character &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;,
because those would need additional escaping inside a character class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+\.\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+[.]\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSimplifiable" defaultSeverity="WEAK WARNING" displayName="Regular expression can be simplified" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports regular expressions that can be simplified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a] xx* [ah-hz]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a x+ [ahz]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEmptyAlternationBranch" defaultSeverity="WARNING" displayName="Empty branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty branches in a RegExp alternation.
An empty branch will only match the empty string, and in most cases that is not what is desired.
This inspection will not report a single empty branch at the start or the end of an alternation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha||bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpAnonymousGroup" defaultSeverity="WARNING" displayName="Anonymous capturing group or numeric back reference" enabled="false" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous capturing groups and numeric back references in a RegExp.
These are only reported when the RegExp dialect supports named group and named group references.
Named groups and named back references improve code readability and are recommended to use instead.
When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,
i.e. &lt;code&gt;(?:xxx)&lt;/code&gt; instead of &lt;code&gt;(xxx)&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (\d\d\d\d)\1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A better regex pattern could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (?&amp;lt;quad&gt;\d\d\d\d)\k&amp;lt;quad&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSuspiciousBackref" defaultSeverity="WARNING" displayName="Suspicious back reference" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports back references that will not be resolvable at runtime.
This means that the back reference can never match anything.
A back reference will not be resolvable when the group is defined after the back reference,
or if the group is defined in a different branch of an alternation.
&lt;p&gt;&lt;b&gt;Example of a group defined after its back reference:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \1(abc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example of a group and a back reference in different branches:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a(b)c|(xy)\1z
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantEscape" defaultSeverity="WARNING" displayName="Redundant character escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning.
Many escape sequences that are necessary outside of a character class are redundant inside square brackets &lt;code&gt;[]&lt;/code&gt; of a character class.
&lt;p&gt;
  Although unescaped opening curly braces &lt;code&gt;{&lt;/code&gt; outside of character classes are allowed in some dialects (JavaScript, Python, and so on),
  it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.
  For this reason the inspection does not report escaped opening curly braces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \-\;[\.]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  -;[.]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The &lt;b&gt;Ignore escaped closing brackets '}' and ']'&lt;/b&gt; option specifies whether to report &lt;code&gt;\}&lt;/code&gt; and &lt;code&gt;\]&lt;/code&gt; outside of a character class
when they are allowed to be unescaped by the RegExp dialect.
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpOctalEscape" defaultSeverity="INFORMATION" displayName="Octal escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports octal escapes, which are easily confused with back references.
Use hexadecimal escapes to avoid confusion.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \x07
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSingleCharAlternation" defaultSeverity="WARNING" displayName="Single character alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single char alternation in a RegExp.
It is simpler to use a character class instead.
This may also provide better matching performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a|b|c|d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abcd]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnnecessaryNonCapturingGroup" defaultSeverity="WARNING" displayName="Unnecessary non-capturing group" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary non-capturing groups, which have no influence on the match result.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, (?:this) is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, this is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRepeatedSpace" defaultSeverity="WARNING" displayName="Consecutive spaces" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple consecutive spaces in a RegExp.
Because spaces are not visible by default, it can be hard to see how many spaces are required.
The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (     )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ( {5})
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnexpectedAnchor" defaultSeverity="WARNING" displayName="Begin or end anchor in unexpected position" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;\A&lt;/code&gt; anchors not at the beginning of the pattern and
&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; or &lt;code&gt;\z&lt;/code&gt; anchors not at the end of the pattern.
In the wrong position these RegExp anchors prevent the pattern from matching anything.
In case of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors, most likely the literal character was meant and the escape forgotten.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (Price $10)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantNestedCharacterClass" defaultSeverity="WARNING" displayName="Redundant nested character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary nested character classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-c[x-z]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-cx-z]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateAlternationBranch" defaultSeverity="WARNING" displayName="Duplicate branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate branches in a RegExp alternation.
Duplicate branches slow down matching and obscure the intent of the expression.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie|alpha)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateCharacterInClass" defaultSeverity="WARNING" displayName="Duplicate character in character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate characters inside a RegExp character class.
Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [aabc]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abc]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Control flow issues" path="JavaScript and TypeScript"><inspection shortName="JSObjectNullOrUndefined" defaultSeverity="WARNING" displayName="Object is 'null' or 'undefined'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an error caused by invoking a method,
accessing a property, or calling a function on an object that is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateConditionJS" defaultSeverity="WARNING" displayName="Duplicate condition in 'if' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate conditions in different branches of an
&lt;code&gt;if&lt;/code&gt; statement. Duplicate conditions usually represent programmer oversight.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (a) {
    ...
  } else if (a) {
    ...
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialIfJS" defaultSeverity="WARNING" displayName="Redundant 'if' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement that
can be simplified to a single assignment or
a &lt;code&gt;return&lt;/code&gt; statement.  &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if(foo())
 {
  return true;
 }
 else
 {
   return false;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;
 &lt;code&gt;return foo();&lt;/code&gt;
&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnreachableCodeJS" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that can never be executed, which almost certainly indicates an error
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementWithTooManyBranchesJS" defaultSeverity="WARNING" displayName="'if' statement with too many branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement with too many
branches. Such statements may be confusing, and 
often indicate inadequate levels of design abstraction.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of branches expected.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnContinueStatementJS" defaultSeverity="WARNING" displayName="Unnecessary label on 'continue' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;continue&lt;/code&gt; statement
whose labels may be removed without changing the flow of control.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousTypeOfGuard" defaultSeverity="WARNING" displayName="Unsound type guard check" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;typeof&lt;/code&gt; or &lt;code&gt;instanceof&lt;/code&gt; unsound type guard check.
The &lt;code&gt;typeof x&lt;/code&gt; type guard can be unsound in one of the following two cases:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof x&lt;/code&gt; never corresponds to the specified value (for example, &lt;code&gt;typeof x === 'number'&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is of the type 'string | boolean')&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof x&lt;/code&gt; always corresponds to the specified value (for example,  &lt;code&gt;typeof x === 'string'&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is of the type 'string')&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
The &lt;code&gt;x instanceof A&lt;/code&gt; type guard can be unsound in one of the following two cases:
&lt;ul&gt;
  &lt;li&gt;The type of &lt;code&gt;x&lt;/code&gt; is not related to &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The type of &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;A&lt;/code&gt; or a subtype of &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBooleanExpressionJS" defaultSeverity="WARNING" displayName="Pointless statement or boolean expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a pointless or pointlessly complicated boolean expression or statement.
&lt;p&gt;Example:
&lt;pre&gt;&lt;code&gt;
  let a = !(false &amp;&amp; x);
  let b = false || x;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied the result looks like:
&lt;pre&gt;&lt;code&gt;
  let a = true;
  let b = x;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoopStatementThatDoesntLoopJS" defaultSeverity="WARNING" displayName="Loop statement that doesn't loop" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; statement
whose bodies are guaranteed to execute at most once. Normally, this indicates an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryReturnJS" defaultSeverity="WARNING" displayName="Unnecessary 'return' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary &lt;code&gt;return&lt;/code&gt; statement, that is, a &lt;code&gt;return&lt;/code&gt; statement that 
returns no value and occurs just before the function would have "fallen through" the bottom.
These statements may be safely removed.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementWithIdenticalBranchesJS" defaultSeverity="WARNING" displayName="'if' statement with identical branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches. Such statements are almost
certainly an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnBreakStatementJS" defaultSeverity="WARNING" displayName="Unnecessary label on 'break' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;break&lt;/code&gt; statement
whose labels may be removed without changing the flow of control.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantConditionalExpressionJS" defaultSeverity="WARNING" displayName="Constant conditional expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a conditional expression in the format &lt;code&gt;true? result1: result2&lt;/code&gt; or &lt;code&gt;false? result1: result2&lt;/b&gt;.
Suggests simplifying the expression.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialConditionalJS" defaultSeverity="WARNING" displayName="Redundant conditional expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a conditional expression of the form
&lt;pre&gt;&lt;code&gt;
condition ? true : false
condition ? false : true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  These expressions may be safely converted to
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
condition
!condition
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForLoopReplaceableByWhileJS" defaultSeverity="WARNING" displayName="'for' loop may be replaced by 'while' loop" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt; loop
that contains neither initialization nor an update component. Suggests replacing the loop with a simpler &lt;code&gt;while&lt;/code&gt; statement.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for(; exitCondition(); ) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied the result looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  while(exitCondition()) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the checkbox below if you wish this inspection to ignore &lt;b&gt;for&lt;/b&gt; loops with trivial or non-existent conditions.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryContinueJS" defaultSeverity="WARNING" displayName="Unnecessary 'continue' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary &lt;code&gt;continue&lt;/code&gt; statement at the end of a loop. Suggests removing such statements.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TailRecursionJS" defaultSeverity="WARNING" displayName="Tail recursion" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a tail recursion, that is, when a function calls itself
as its last action before returning.  A tail recursion can always be replaced by looping, which will be considerably faster.
Some JavaScript engines perform this optimization, while others do not.  Thus, tail recursive solutions may have considerably different
performance characteristics in different environments.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpressionWithIdenticalBranchesJS" defaultSeverity="WARNING" displayName="Conditional expression with identical branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelJS" defaultSeverity="WARNING" displayName="Unnecessary label" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused label.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Switch statement issues" path="JavaScript and TypeScript"><inspection shortName="JSDuplicateCaseLabel" defaultSeverity="WARNING" displayName="Duplicate 'case' label" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated &lt;code&gt;case&lt;/code&gt; label on a &lt;code&gt;switch&lt;/code&gt; statement, which normally indicates an error.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TextLabelInSwitchStatementJS" defaultSeverity="WARNING" displayName="Text label in 'switch' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled statement inside a &lt;code&gt;switch&lt;/code&gt; statement, which 
often results from a typo.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    &lt;b&gt;switch&lt;/b&gt;(x)
    {
        &lt;b&gt;case&lt;/b&gt; 1:
        case2:   //typo!
        &lt;b&gt;case&lt;/b&gt; 3:
            &lt;b&gt;break&lt;/b&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DefaultNotLastCaseInSwitchJS" defaultSeverity="WARNING" displayName="'default' not last case in 'switch'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement where the &lt;code&gt;default&lt;/code&gt; case
comes before another case instead of being the very last case, which may cause confusion.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedSwitchStatementJS" defaultSeverity="WARNING" displayName="Nested 'switch' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement that is
nested in another &lt;code&gt;switch&lt;/code&gt; statement.  Nested &lt;code&gt;switch&lt;/code&gt; statements may be
very confusing, particularly if indenting is inconsistent.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSRedundantSwitchStatement" defaultSeverity="INFORMATION" displayName="'switch' statement is redundant and can be replaced" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement with an empty body, or with only one &lt;code&gt;case&lt;/code&gt; branch, or with a &lt;code&gt;default&lt;/code&gt; branch only.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMissingSwitchDefault" defaultSeverity="INFORMATION" displayName="'switch' statement has no 'default' branch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement without a &lt;code&gt;default&lt;/code&gt; clause when some possible values are not enumerated.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSwitchVariableDeclarationIssue" defaultSeverity="WARNING" displayName="Variable is declared and being used in different 'case' clauses" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable that is declared in one &lt;code&gt;case&lt;/code&gt; clause of a &lt;code&gt;switch&lt;/code&gt; statement but is used in another &lt;code&gt;case&lt;/code&gt;
clause of the same statement.
For block-scoped variables, this results in throwing a &lt;code&gt;ReferenceError&lt;/code&gt;.
For &lt;code&gt;var&lt;/code&gt; variables, it indicates a potential error. &lt;p&gt;Disable the inspection for &lt;code&gt;var&lt;/code&gt; variables if this pattern is used intentionally.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FallThroughInSwitchStatementJS" defaultSeverity="WARNING" displayName="Fallthrough in 'switch' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement where control can proceed from a branch to the next one.  Such "fall-through" often
indicates an error, for example, a missing &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnreachableSwitchBranches" defaultSeverity="WARNING" displayName="Unreachable 'case' branch of a 'switch' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unreachable &lt;code&gt;case&lt;/code&gt; branch of a &lt;code&gt;switch&lt;/code&gt; statement. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param {('foo' | 'bar')} p
 */
function foo(p) {
    switch (p) {
        case 'foo': break;
        case 'bar': break;
        case 'baz': break; // unreachable
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMissingSwitchBranches" defaultSeverity="INFORMATION" displayName="'switch' statement has missing branches" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement on a variable of the type &lt;code&gt;enum&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt; when the statement doesn't cover some value options from the type.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSONPath" path=""><inspection shortName="JsonPathUnknownFunction" defaultSeverity="WARNING" displayName="Unknown JSONPath function" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown name in a JSONPath function call instead of known standard function names:
&lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;avg&lt;/code&gt;, &lt;code&gt;stddev&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonPathEvaluateUnknownKey" defaultSeverity="WARNING" displayName="Unknown property key used for JSONPath evaluate expression" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonPathUnknownOperator" defaultSeverity="WARNING" displayName="Unknown JSONPath operator" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 
&lt;code&gt;in&lt;/code&gt;, &lt;code&gt;nin&lt;/code&gt;, &lt;code&gt;subsetof&lt;/code&gt;, &lt;code&gt;anyof&lt;/code&gt;, &lt;code&gt;noneof&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="OpenAPI specifications" path=""><inspection shortName="SwJsonUnresolvedReferencesInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="JSON" pluginId="com.intellij.swagger" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unresolved references in JSON specification files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwYamlUnresolvedReferencesInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="yaml" pluginId="com.intellij.swagger" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unresolved references in YAML specification files.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwJsonMaybeSpecificationInspection" defaultSeverity="WARNING" displayName="Possible OpenAPI/Swagger specification candidate" enabled="true" language="JSON" pluginId="com.intellij.swagger" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects JSON files that can be interpreted as a part of OpenAPI/Swagger specification.
&lt;p&gt;
  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;
  The following example contains two files located in the same directory. First one is a plain primary specification file.
  Second is referenced from the first one and thus is suggested to be considered a specification too.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Primary specification file &lt;code&gt;openapi.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="yaml"&gt;
openapi: 3.1.0
components:
  schemas:
    CustomSchema:
      description: Custom schema object
      properties:
        foo:
          $ref: 'common.components.json#/components/schemas/CommonSchema'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Specification file candidate &lt;code&gt;common.components.json&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="json"&gt;
{
  "components": { // 'Mark file as OpenAPI specification' highlighting
    "schemas": {
      "CommonSchema": {
        "description": "Common schema object reused in several specifications"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwYamlMaybeSpecificationInspection" defaultSeverity="WARNING" displayName="Possible OpenAPI/Swagger specification candidate" enabled="true" language="yaml" pluginId="com.intellij.swagger" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects YAML files that can be interpreted as a part of OpenAPI/Swagger specification.
&lt;p&gt;
  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;
  The following example contains two files located in the same directory. First one is a plain primary specification file.
  Second is referenced from the first one and thus is suggested to be considered a specification too.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Primary specification file &lt;code&gt;openapi.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
openapi: 3.1.0
components:
  schemas:
    CustomSchema:
      description: Custom schema object
      properties:
        foo:
          $ref: 'common.components.yaml#/components/schemas/CommonSchema'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Specification file candidate &lt;code&gt;common.components.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
components: # 'Mark file as OpenAPI specification' highlighting
  schemas:
    CommonSchema:
      description: Common schema object reused in several specifications
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="File Watchers" path=""><inspection shortName="TaskProblemsInspection" defaultSeverity="WEAK WARNING" displayName="File watcher problems" enabled="true" pluginId="com.intellij.plugins.watcher" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an error detected by the output filters from a File Watcher.
&lt;p&gt;
A File Watcher tracks changes in files and executes the configured command when a change is detected.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Sass/SCSS" path=""><inspection shortName="SassScssUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved variable" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/variables"&gt;Sass/SCSS variable&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: $unknown-var;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssUnresolvedPlaceholderSelector" defaultSeverity="WARNING" displayName="Unresolved placeholder selector" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/variables"&gt;Sass/SCSS placeholder selector&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  @extend %unknown-placeholder-selector;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssUnresolvedMixin" defaultSeverity="WARNING" displayName="Unresolved mixin" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/at-rules/mixin"&gt;Sass/SCSS mixin&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  @include unknown-mixin;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssResolvedByNameOnly" defaultSeverity="WEAK WARNING" displayName="Missing import" enabled="true" language="CSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't 
explicitly &lt;a href="https://sass-lang.com/documentation/at-rules/import"&gt;imported&lt;/a&gt; in the current file.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: $var-in-other-file;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path=""><inspection shortName="DuplicatedCode" defaultSeverity="WEAK WARNING" displayName="Duplicated code fragment" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">Reports duplicated blocks of code from the selected scope: the same file or the entire project.&lt;!-- tooltip end --&gt; &lt;p&gt;The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.&lt;p&gt;The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.&lt;p&gt;You can also configure the constructs that you want to anonymize in &lt;a href="settings://duplicates.index"&gt; File | Settings | Editor | Duplicates&lt;/a&gt;.</inspection><inspection shortName="ReassignedToPlainText" defaultSeverity="WARNING" displayName="Reassigned to plain text" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files that were explicitly re-assigned to Plain Text File Type.
This association is unnecessary because the platform auto-detects text files by content automatically.

&lt;p&gt;You can dismiss this warning by removing the file type association
in &lt;b&gt;Settings | Editor | File Types | Text&lt;/b&gt;.&lt;/p&gt;

&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentLineSeparators" defaultSeverity="WARNING" displayName="Inconsistent line separators" enabled="false" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files with line separators different from the ones that are specified in the project's settings.
&lt;p&gt;For example, the inspection will be triggered if you set the line separator to &lt;code&gt;\n&lt;/code&gt; in
  &lt;a href="settings://preferences.sourceCode?Line%20separator"&gt;Settings | Editor | Code Style | Line separator&lt;/a&gt;,
  while the file you are editing uses &lt;code&gt;\r\n&lt;/code&gt; as a line separator.&lt;/p&gt;

&lt;p&gt;The inspection also warns you about mixed line separators within a file.&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyDirectory" defaultSeverity="WARNING" displayName="Empty directory" enabled="false" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports empty directories.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Only report empty directories located under a source folder&lt;/b&gt; option to have only directories under source
  roots reported.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantSuppression" defaultSeverity="WARNING" displayName="Redundant suppression" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
public class C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({"WeakerAccess"})
  private boolean CONST = true;
  void f() {
    CONST = false;
  }
}
&lt;/code&gt;&lt;/pre&gt;


&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="TodoComment" defaultSeverity="WARNING" displayName="TODO comment" enabled="false" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;TODO&lt;/b&gt; comments in your code.
&lt;p&gt;You can configure the format for &lt;b&gt;TODO&lt;/b&gt; comments in &lt;a href="settings://preferences.toDoOptions"&gt;Settings | Editor | TODO&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Enable the &lt;b&gt;Only warn on TODO comments without any details&lt;/b&gt; option to only warn on empty TODO comments, that
  don't provide any description on the task that should be done. Disable to report all TODO comments.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProblematicWhitespace" defaultSeverity="WARNING" displayName="Problematic whitespace" enabled="false" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following problems:
&lt;ul&gt;
  &lt;li&gt;Tabs used for indentation when the code style is configured to use only spaces.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation when the code style is configured to use only tabs.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation and tabs used for alignment when the code
    style is configured to use smart tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LongLine" defaultSeverity="WARNING" displayName="Line is longer than allowed by code style" enabled="false" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lines that are longer than the &lt;b&gt;Hard wrap at&lt;/b&gt; parameter specified in
&lt;a href="settings://preferences.sourceCode?Hard%20wrap%20at"&gt;Settings | Editor | Code Style | General&lt;/a&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect formatting" enabled="false" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports formatting issues that appear if your code doesn't
  follow your project's code style settings.
&lt;/p&gt;
&lt;p&gt;
  This inspection is not compatible with languages that require
  third-party formatters for code formatting, for example, Go or
  C with CLangFormat enabled.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="InjectedReferences" defaultSeverity="ERROR" displayName="Injected references" enabled="true" pluginId="org.intellij.intelliLang" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references injected by
&lt;a href="https://www.jetbrains.com/help/idea/using-language-injections.html"&gt;Language Injections&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
    @Language("file-reference")
    String fileName = "/home/user/nonexistent.file"; // highlighted if file doesn't exist
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Annotator" defaultSeverity="ERROR" displayName="Annotator" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run.
These issues are usually always highlighted in the editor and can't be configured, unlike inspections.
These options control the scope of checks performed by this inspection:
&lt;ul&gt;
  &lt;li&gt;Option "&lt;b&gt;Report syntax errors&lt;/b&gt;": report parser-related issues.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report issues from language-specific annotators&lt;/b&gt;": report issues found by annotators configured for the relevant language.
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/annotator.html"&gt;Custom Language Support: Annotators&lt;/a&gt; for details.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report other highlighting problems&lt;/b&gt;": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions).
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting"&gt;Custom Language Support: Highlighting&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="HTTP Client" path=""><inspection shortName="HttpRequestEnvironmentAuthConfigurationValidationInspection" defaultSeverity="WARNING" displayName="Auth configuration validation" enabled="true" language="JSON" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Auth configuration the following problems in HTTP Client environment files:
&lt;ul&gt;
  &lt;li&gt;
    Missing properties in Auth configuration
  &lt;/li&gt;
  &lt;li&gt;
    Auth/Security configuration placed in private environment file
  &lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientUnresolvedAuthId" defaultSeverity="ERROR" displayName="Unresolved Auth identifier" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestRequestSeparatorXmlBodyInspection" defaultSeverity="WEAK WARNING" displayName="Missing request separator in HTML/XML body" enabled="true" language="XML" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible requests in injected XML/HTML body where request separator &lt;code&gt;###&lt;/code&gt; is missing. 
The quick fix suggests adding the separator &lt;code&gt;###&lt;/code&gt; before the request.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestRequestSeparatorYamlBodyInspection" defaultSeverity="WEAK WARNING" displayName="Missing request separator in YAML body" enabled="true" language="yaml" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible requests in injected YAML body where request separator &lt;code&gt;###&lt;/code&gt; is missing. 
The quick fix suggests adding the separator &lt;code&gt;###&lt;/code&gt; before the request.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestCustomHttpMethodInspection" defaultSeverity="WARNING" displayName="Unknown HTTP method" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible custom HTTP methods. 
The quick fix suggests adding the custom HTTP method to project settings.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestWhitespaceInsideRequestTargetPath" defaultSeverity="WEAK WARNING" displayName="Whitespace in URL in request" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestPlaceholder" defaultSeverity="WARNING" displayName="'$placeholder' in HTTP Request" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;$placeholder&lt;/code&gt; inside a request. 
&lt;p&gt;A &lt;code&gt;$placeholder&lt;/code&gt; to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping &lt;code&gt;/aaaa/*/bbb&lt;/code&gt; will be generated as &lt;code&gt;GET localhost/aaaa/{{$placeholder}}/bbb&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectHttpHeaderInspection" defaultSeverity="WARNING" displayName="Incorrect HTTP header" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports unknown HTTP headers that do not match any &lt;a href="https://www.iana.org/assignments/message-headers/message-headers.xml"&gt;publicly
  known headers&lt;/a&gt;. The quick fix suggests adding the header to the list of custom headers when the &lt;b&gt;Use custom HTTP headers&lt;/b&gt; option
  is enabled. HTTP headers from the list of custom headers will not trigger the inspection.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved environment variable" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports variables undeclared in the current environment HTTP Client.&lt;/p&gt;
&lt;p&gt;
  Executing requests with undeclared variables probably fail.
  Consider adding a variable to the environment or selecting an environment with this variable.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Inspection doesn't report variables in request bodies, because it can be a valid syntax of the body.&lt;/p&gt;
&lt;p&gt;
  Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via
  &lt;code&gt;client.global.set&lt;/code&gt; or &lt;code&gt;request.variables.set&lt;/code&gt; functions call.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestRequestSeparatorJsonBodyInspection" defaultSeverity="WEAK WARNING" displayName="Missing request separator in JSON body" enabled="true" language="JSON" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports possible requests in injected JSON body where request separator &lt;code&gt;###&lt;/code&gt; is missing. 
The quick fix suggests adding the separator &lt;code&gt;###&lt;/code&gt; before the request.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestContentLengthIsIgnored" defaultSeverity="WARNING" displayName="Redundant 'Content-Length'" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an explicitly set &lt;code&gt;Content-Length&lt;/code&gt; header. The header is redundant because HTTP Client uses the actual request body length.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientInappropriateProtocolUsageInspection" defaultSeverity="WEAK WARNING" displayName="Inappropriate HTTP Protocol usage" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inappropriate usage of HTTP protocol keyword, e.g. &lt;code&gt;HTTP/2&lt;/code&gt;, with non-HTTP method requests. Such a usage will be ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="CSS"><inspection shortName="CssNonIntegerLengthInPixels" defaultSeverity="WEAK WARNING" displayName="Non-integer length in pixels" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-integer length in pixels.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; width: 3.14px&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssNoGenericFontName" defaultSeverity="WARNING" displayName="Missing generic font family name" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Verifies that the &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family"&gt;font-family&lt;/a&gt;&lt;/code&gt; property
contains a generic font family name as a fallback alternative.
&lt;p&gt;
  Generic font family names are: &lt;code&gt;serif&lt;/code&gt;, &lt;code&gt;sans-serif&lt;/code&gt;, &lt;code&gt;cursive&lt;/code&gt;, &lt;code&gt;fantasy&lt;/code&gt;,
  and &lt;code&gt;monospace&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssMissingComma" defaultSeverity="WARNING" displayName="Missing comma in selector list" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended
but a comma is missing at the end of one or several lines.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
input /* comma has probably been forgotten */
.button {
  margin: 1px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RELAX NG" path=""><inspection shortName="UnusedDefine" defaultSeverity="WARNING" displayName="Unused define" enabled="false" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused named pattern (&lt;code&gt;define&lt;/code&gt;) in a RELAX-NG file (XML or Compact Syntax).
&lt;code&gt;define&lt;/code&gt; elements that are used through an include in another file are ignored.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" pluginId="com.intellij" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a named pattern (&lt;code&gt;define&lt;/code&gt;) in RELAX-NG files that use XML syntax.
Suggests creating the referenced &lt;code&gt;define&lt;/code&gt; element.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Angular" path=""><inspection shortName="AngularCliAddDependency" defaultSeverity="WARNING" displayName="Angular CLI add dependency" enabled="true" language="JSON" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests using the &lt;code&gt;ng add&lt;/code&gt; command to install the dependency.
&lt;p&gt;&lt;code&gt;ng add&lt;/code&gt; will use the package manager to download it and invoke a schematic
  which can update your project with configuration changes, add additional dependencies (e.g. polyfills),
  or scaffold package-specific initialization code.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedModuleExport" defaultSeverity="ERROR" displayName="Undefined export from Angular module" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInaccessibleSymbol" defaultSeverity="ERROR" displayName="Inaccessible component member or directive input" enabled="true" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to invisible (private or protected) component member or directive input from an Angular template.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedBinding" defaultSeverity="ERROR" displayName="Undefined binding" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an undefined property, event, or structural directive bindings on elements.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidI18nAttribute" defaultSeverity="WARNING" displayName="Invalid i18n attribute" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a problem with a &lt;code&gt;i18n-*&lt;/code&gt; attribute.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIncorrectTemplateDefinition" defaultSeverity="ERROR" displayName="Incorrect component template definition" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a component that  doesn’t have an associated template or uses both &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;templateUrl&lt;/code&gt; properties.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularAmbiguousComponentTag" defaultSeverity="ERROR" displayName="Ambiguous component tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a component that is matched on an embedded template element &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; or multiple components matched
on any other element.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingOrInvalidDeclarationInModule" defaultSeverity="ERROR" displayName="Missing or invalid component, directive or pipe declaration in a module" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AngularInvalidSelector" defaultSeverity="ERROR" displayName="Missing or invalid selector" enabled="true" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid &lt;code&gt;selector&lt;/code&gt; property of a component or directive.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNonEmptyNgContent" defaultSeverity="ERROR" displayName="Content inside &lt;ng-content&gt; tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a text or tag occurrence inside a &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag used for content projection.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidAnimationTriggerAssignment" defaultSeverity="ERROR" displayName="Invalid animation trigger assignment" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid assignment of an animation trigger. To attach an animation to an element, use
&lt;code&gt;[@triggerName]="expression"&lt;/code&gt; or an attribute without a value &lt;code&gt;@triggerName&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIncorrectBlockUsage" defaultSeverity="ERROR" displayName="Incorrect usage of Angular block" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems with Angular blocks.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularRecursiveModuleImportExport" defaultSeverity="ERROR" displayName="Recursive import or export of an Angular module or a standalone component" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a cyclic dependency between Angular modules or standalone components.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidTemplateReferenceVariable" defaultSeverity="ERROR" displayName="Unbound or ambiguous template reference variable" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a template reference variable that is not assigned to a directive when using &lt;code&gt;exportAs&lt;/code&gt; or is assigned to multiple
directives.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedTag" defaultSeverity="ERROR" displayName="Undefined tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a tag defined by a component or directive out of the current scope.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingRequiredDirectiveInputBinding" defaultSeverity="ERROR" displayName="Missing required directive input" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing binding for a required directive input.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNonStandaloneComponentImports" defaultSeverity="ERROR" displayName="Invalid usage of imports in non-standalone components" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMultipleStructuralDirectives" defaultSeverity="ERROR" displayName="Multiple structural directives on one element" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple structural directives (&lt;code&gt;*ngIf&lt;/code&gt;, &lt;code&gt;*ngFor&lt;/code&gt;, etc.) on one element.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIncorrectLetUsage" defaultSeverity="ERROR" displayName="Incorrect usage of @let declaration" enabled="true" language="Angular2" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems with @let declaration usages.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularDeferBlockOnTrigger" defaultSeverity="ERROR" displayName="Problems with @defer `on` triggers" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues with triggers in `on` parameters in `@defer` block.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidImportedOrDeclaredSymbol" defaultSeverity="ERROR" displayName="Invalid imported or declared symbol" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or
can’t be used in the context of the property.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNgOptimizedImage" defaultSeverity="WEAK WARNING" displayName="Issues with ngSrc usage in img tags" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues related to usage of &lt;code&gt;ngSrc&lt;/code&gt; (&lt;a href="https://angular.io/guide/image-directive"&gt;NgOptimizedDirective&lt;/a&gt;)
on &lt;code&gt;img&lt;/code&gt; tags.
&lt;p&gt;
Following issues are reported:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;img&lt;/code&gt; tags, which use &lt;code&gt;src&lt;/code&gt; instead of &lt;code&gt;ngSrc&lt;/code&gt;
  &lt;li&gt;lack of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;, or &lt;code&gt;fill&lt;/code&gt; attributes when &lt;code&gt;ngSrc&lt;/code&gt; is used
  &lt;li&gt;&lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;fill&lt;/code&gt; attributes being present on the same element when &lt;code&gt;ngSrc&lt;/code&gt; is used
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidEntryComponent" defaultSeverity="ERROR" displayName="Invalid entry component" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid Angular component specified in the module’s &lt;code&gt;bootstrap&lt;/code&gt; or &lt;code&gt;entryComponents&lt;/code&gt; property.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUnresolvedPipe" defaultSeverity="ERROR" displayName="Unresolved pipe" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved pipe.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingEventHandler" defaultSeverity="ERROR" displayName="Missing event handler" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing event handler statement for an event binding.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularBindingTypeMismatch" defaultSeverity="ERROR" displayName="Invalid binding type" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a mismatch between actual and expected directive binding type.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularForBlockNonIterableVar" defaultSeverity="ERROR" displayName="Non-iterable type in @for block" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports that the type of variable to iterate over does not have &lt;code&gt;[Symbol.iterator]()&lt;/code&gt; method, which returns an iterator.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInsecureBindingToEvent" defaultSeverity="WARNING" displayName="Insecure binding to event" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="242.22855.79" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a binding to an event property or attribute, for example, &lt;code&gt;[onclick]&lt;/code&gt; or &lt;code&gt;[attr.onclick]&lt;/code&gt; instead of
&lt;code&gt;(click)&lt;/code&gt;.
&lt;!-- tooltip end --&gt;&lt;/body&gt;
&lt;/html&gt;</inspection></group></inspections>